
c:/Users/vane_/Desktop/WebDevelopmentIoT/Lecture10_27/Photon/target/2.2.0/photon/Photon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000023c4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a23e0  080a23e0  000123e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a23e8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d4  20000000  080a23ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005b4  200000d8  200000d8  000300d8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a24c0  080a24c0  000224c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a24e8  080a24e8  000224e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000effcd  00000000  00000000  000224ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000121df  00000000  00000000  001124b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00016374  00000000  00000000  00124698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002060  00000000  00000000  0013aa0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000048c8  00000000  00000000  0013ca6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00025cae  00000000  00000000  00141334  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000283ce  00000000  00000000  00166fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000abd10  00000000  00000000  0018f3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000541c  00000000  00000000  0023b0c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fb3b 	bl	80a16a8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fb43 	bl	80a16c4 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a23ec 	.word	0x080a23ec
 80a004c:	200000d4 	.word	0x200000d4
 80a0050:	200000d8 	.word	0x200000d8
 80a0054:	20000689 	.word	0x20000689
 80a0058:	20000689 	.word	0x20000689

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fcfd 	bl	80a0a5c <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a23c0 	.word	0x080a23c0
 80a0080:	080a23e0 	.word	0x080a23e0

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b822 	b.w	80a00cc <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f833 	bl	80a00f4 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f000 bc9b 	b.w	80a09cc <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f000 ba69 	b.w	80a056c <malloc>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f000 ba6f 	b.w	80a057c <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a00ae:	b40e      	push	{r1, r2, r3}
 80a00b0:	b503      	push	{r0, r1, lr}
 80a00b2:	ab03      	add	r3, sp, #12
 80a00b4:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 80a00b8:	2100      	movs	r1, #0
        va_start(args, format);
 80a00ba:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80a00bc:	f000 fb67 	bl	80a078e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a00c0:	b002      	add	sp, #8
 80a00c2:	f85d eb04 	ldr.w	lr, [sp], #4
 80a00c6:	b003      	add	sp, #12
 80a00c8:	4770      	bx	lr
	...

080a00cc <setup>:

int counter = 0;
int LED = D7;

// setup() runs once, when the device is first turned on.
void setup() {
 80a00cc:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  pinMode(LED, OUTPUT);
 80a00ce:	4b08      	ldr	r3, [pc, #32]	; (80a00f0 <setup+0x24>)
 80a00d0:	2101      	movs	r1, #1
 80a00d2:	8818      	ldrh	r0, [r3, #0]
 80a00d4:	f000 ffe8 	bl	80a10a8 <pinMode>
  RGB.control(true);  // take control of the RGB LED
 80a00d8:	2001      	movs	r0, #1
 80a00da:	f000 fc18 	bl	80a090e <_ZN8RGBClass7controlEb>
  Serial.begin(); //initialize serial communication
 80a00de:	f000 fdbf 	bl	80a0c60 <_Z16_fetch_usbserialv>
}
 80a00e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(); //initialize serial communication
 80a00e6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00ea:	f000 bd9f 	b.w	80a0c2c <_ZN9USBSerial5beginEl>
 80a00ee:	bf00      	nop
 80a00f0:	20000000 	.word	0x20000000

080a00f4 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a00f4:	b530      	push	{r4, r5, lr}
  // The core of your code will likely live here.
  if (counter % 2 == 0) {
 80a00f6:	4c1d      	ldr	r4, [pc, #116]	; (80a016c <loop+0x78>)
 80a00f8:	4b1d      	ldr	r3, [pc, #116]	; (80a0170 <loop+0x7c>)
 80a00fa:	6822      	ldr	r2, [r4, #0]
 80a00fc:	8818      	ldrh	r0, [r3, #0]
 80a00fe:	f012 0501 	ands.w	r5, r2, #1
void loop() {
 80a0102:	b085      	sub	sp, #20
  if (counter % 2 == 0) {
 80a0104:	d12a      	bne.n	80a015c <loop+0x68>
    digitalWrite(LED, HIGH);
 80a0106:	2101      	movs	r1, #1
 80a0108:	f000 ffdf 	bl	80a10ca <digitalWrite>
    RGB.color(255, 0, 0); // set color red
 80a010c:	462a      	mov	r2, r5
 80a010e:	4629      	mov	r1, r5
 80a0110:	20ff      	movs	r0, #255	; 0xff
  }
  else { 
    digitalWrite(LED, LOW);
    RGB.color(0, 255, 0); // set color green
 80a0112:	f000 fc0c 	bl	80a092e <_ZN8RGBClass5colorEiii>
  }
  counter++;
 80a0116:	6823      	ldr	r3, [r4, #0]
 80a0118:	3301      	adds	r3, #1
 80a011a:	6023      	str	r3, [r4, #0]
  Serial.printf("{\"t\":%d,\"str\":\"%s\"}", (int)Time.now(), Time.timeStr().c_str());
 80a011c:	f000 fda0 	bl	80a0c60 <_Z16_fetch_usbserialv>
 80a0120:	4604      	mov	r4, r0
 80a0122:	f000 fbd6 	bl	80a08d2 <_ZN9TimeClass3nowEv>
 80a0126:	4605      	mov	r5, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 80a0128:	f000 fbd3 	bl	80a08d2 <_ZN9TimeClass3nowEv>
 80a012c:	4602      	mov	r2, r0
 80a012e:	17c3      	asrs	r3, r0, #31
 80a0130:	4668      	mov	r0, sp
 80a0132:	f000 fb79 	bl	80a0828 <_ZN9TimeClass7timeStrEx>
 80a0136:	462a      	mov	r2, r5
 80a0138:	9b00      	ldr	r3, [sp, #0]
 80a013a:	490e      	ldr	r1, [pc, #56]	; (80a0174 <loop+0x80>)
 80a013c:	4620      	mov	r0, r4
 80a013e:	f7ff ffb6 	bl	80a00ae <_ZN5Print6printfEPKcz>
 80a0142:	4668      	mov	r0, sp
 80a0144:	f000 fa74 	bl	80a0630 <_ZN6StringD1Ev>
  Serial.println();
 80a0148:	f000 fd8a 	bl	80a0c60 <_Z16_fetch_usbserialv>
 80a014c:	f000 faf6 	bl	80a073c <_ZN5Print7printlnEv>
  delay(1000);
 80a0150:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0154:	f000 fbd8 	bl	80a0908 <delay>
 80a0158:	b005      	add	sp, #20
 80a015a:	bd30      	pop	{r4, r5, pc}
    digitalWrite(LED, LOW);
 80a015c:	2100      	movs	r1, #0
 80a015e:	f000 ffb4 	bl	80a10ca <digitalWrite>
    RGB.color(0, 255, 0); // set color green
 80a0162:	2200      	movs	r2, #0
 80a0164:	21ff      	movs	r1, #255	; 0xff
 80a0166:	4610      	mov	r0, r2
 80a0168:	e7d3      	b.n	80a0112 <loop+0x1e>
 80a016a:	bf00      	nop
 80a016c:	200000d8 	.word	0x200000d8
 80a0170:	20000000 	.word	0x20000000
 80a0174:	080a207c 	.word	0x080a207c

080a0178 <_GLOBAL__sub_I_counter>:
SYSTEM_THREAD(ENABLED); // uncomment this to use your particle device without WIFI connection
 80a0178:	2100      	movs	r1, #0
 80a017a:	2001      	movs	r0, #1
 80a017c:	f000 b952 	b.w	80a0424 <system_thread_set_state>

080a0180 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0180:	b508      	push	{r3, lr}
 80a0182:	4b02      	ldr	r3, [pc, #8]	; (80a018c <HAL_Pin_Mode+0xc>)
 80a0184:	681b      	ldr	r3, [r3, #0]
 80a0186:	689b      	ldr	r3, [r3, #8]
 80a0188:	9301      	str	r3, [sp, #4]
 80a018a:	bd08      	pop	{r3, pc}
 80a018c:	080601b0 	.word	0x080601b0

080a0190 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0190:	b508      	push	{r3, lr}
 80a0192:	4b02      	ldr	r3, [pc, #8]	; (80a019c <HAL_Get_Pin_Mode+0xc>)
 80a0194:	681b      	ldr	r3, [r3, #0]
 80a0196:	68db      	ldr	r3, [r3, #12]
 80a0198:	9301      	str	r3, [sp, #4]
 80a019a:	bd08      	pop	{r3, pc}
 80a019c:	080601b0 	.word	0x080601b0

080a01a0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a01a0:	b508      	push	{r3, lr}
 80a01a2:	4b02      	ldr	r3, [pc, #8]	; (80a01ac <HAL_GPIO_Write+0xc>)
 80a01a4:	681b      	ldr	r3, [r3, #0]
 80a01a6:	691b      	ldr	r3, [r3, #16]
 80a01a8:	9301      	str	r3, [sp, #4]
 80a01aa:	bd08      	pop	{r3, pc}
 80a01ac:	080601b0 	.word	0x080601b0

080a01b0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a01b0:	b508      	push	{r3, lr}
 80a01b2:	4b02      	ldr	r3, [pc, #8]	; (80a01bc <HAL_RNG_GetRandomNumber+0xc>)
 80a01b4:	681b      	ldr	r3, [r3, #0]
 80a01b6:	685b      	ldr	r3, [r3, #4]
 80a01b8:	9301      	str	r3, [sp, #4]
 80a01ba:	bd08      	pop	{r3, pc}
 80a01bc:	0806019c 	.word	0x0806019c

080a01c0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a01c0:	b508      	push	{r3, lr}
 80a01c2:	4b02      	ldr	r3, [pc, #8]	; (80a01cc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a01c4:	681b      	ldr	r3, [r3, #0]
 80a01c6:	695b      	ldr	r3, [r3, #20]
 80a01c8:	9301      	str	r3, [sp, #4]
 80a01ca:	bd08      	pop	{r3, pc}
 80a01cc:	0806019c 	.word	0x0806019c

080a01d0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a01d0:	b508      	push	{r3, lr}
 80a01d2:	4b02      	ldr	r3, [pc, #8]	; (80a01dc <hal_rtc_time_is_valid+0xc>)
 80a01d4:	681b      	ldr	r3, [r3, #0]
 80a01d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a01d8:	9301      	str	r3, [sp, #4]
 80a01da:	bd08      	pop	{r3, pc}
 80a01dc:	0806019c 	.word	0x0806019c

080a01e0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a01e0:	b508      	push	{r3, lr}
 80a01e2:	4b02      	ldr	r3, [pc, #8]	; (80a01ec <hal_rtc_get_time+0xc>)
 80a01e4:	681b      	ldr	r3, [r3, #0]
 80a01e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a01e8:	9301      	str	r3, [sp, #4]
 80a01ea:	bd08      	pop	{r3, pc}
 80a01ec:	0806019c 	.word	0x0806019c

080a01f0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a01f0:	b508      	push	{r3, lr}
 80a01f2:	4b02      	ldr	r3, [pc, #8]	; (80a01fc <os_mutex_recursive_create+0xc>)
 80a01f4:	681b      	ldr	r3, [r3, #0]
 80a01f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a01f8:	9301      	str	r3, [sp, #4]
 80a01fa:	bd08      	pop	{r3, pc}
 80a01fc:	080601d0 	.word	0x080601d0

080a0200 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0200:	b508      	push	{r3, lr}
 80a0202:	4b02      	ldr	r3, [pc, #8]	; (80a020c <os_mutex_recursive_destroy+0xc>)
 80a0204:	681b      	ldr	r3, [r3, #0]
 80a0206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0208:	9301      	str	r3, [sp, #4]
 80a020a:	bd08      	pop	{r3, pc}
 80a020c:	080601d0 	.word	0x080601d0

080a0210 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0210:	b508      	push	{r3, lr}
 80a0212:	4b02      	ldr	r3, [pc, #8]	; (80a021c <hal_usart_init+0xc>)
 80a0214:	681b      	ldr	r3, [r3, #0]
 80a0216:	699b      	ldr	r3, [r3, #24]
 80a0218:	9301      	str	r3, [sp, #4]
 80a021a:	bd08      	pop	{r3, pc}
 80a021c:	080601c4 	.word	0x080601c4

080a0220 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0220:	b508      	push	{r3, lr}
 80a0222:	4b02      	ldr	r3, [pc, #8]	; (80a022c <hal_usart_write+0xc>)
 80a0224:	681b      	ldr	r3, [r3, #0]
 80a0226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0228:	9301      	str	r3, [sp, #4]
 80a022a:	bd08      	pop	{r3, pc}
 80a022c:	080601c4 	.word	0x080601c4

080a0230 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0230:	b508      	push	{r3, lr}
 80a0232:	4b02      	ldr	r3, [pc, #8]	; (80a023c <hal_usart_available+0xc>)
 80a0234:	681b      	ldr	r3, [r3, #0]
 80a0236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0238:	9301      	str	r3, [sp, #4]
 80a023a:	bd08      	pop	{r3, pc}
 80a023c:	080601c4 	.word	0x080601c4

080a0240 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0240:	b508      	push	{r3, lr}
 80a0242:	4b02      	ldr	r3, [pc, #8]	; (80a024c <hal_usart_read+0xc>)
 80a0244:	681b      	ldr	r3, [r3, #0]
 80a0246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0248:	9301      	str	r3, [sp, #4]
 80a024a:	bd08      	pop	{r3, pc}
 80a024c:	080601c4 	.word	0x080601c4

080a0250 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0250:	b508      	push	{r3, lr}
 80a0252:	4b02      	ldr	r3, [pc, #8]	; (80a025c <hal_usart_peek+0xc>)
 80a0254:	681b      	ldr	r3, [r3, #0]
 80a0256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0258:	9301      	str	r3, [sp, #4]
 80a025a:	bd08      	pop	{r3, pc}
 80a025c:	080601c4 	.word	0x080601c4

080a0260 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0260:	b508      	push	{r3, lr}
 80a0262:	4b02      	ldr	r3, [pc, #8]	; (80a026c <hal_usart_flush+0xc>)
 80a0264:	681b      	ldr	r3, [r3, #0]
 80a0266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0268:	9301      	str	r3, [sp, #4]
 80a026a:	bd08      	pop	{r3, pc}
 80a026c:	080601c4 	.word	0x080601c4

080a0270 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0270:	b508      	push	{r3, lr}
 80a0272:	4b02      	ldr	r3, [pc, #8]	; (80a027c <hal_usart_is_enabled+0xc>)
 80a0274:	681b      	ldr	r3, [r3, #0]
 80a0276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0278:	9301      	str	r3, [sp, #4]
 80a027a:	bd08      	pop	{r3, pc}
 80a027c:	080601c4 	.word	0x080601c4

080a0280 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0280:	b508      	push	{r3, lr}
 80a0282:	4b02      	ldr	r3, [pc, #8]	; (80a028c <hal_usart_available_data_for_write+0xc>)
 80a0284:	681b      	ldr	r3, [r3, #0]
 80a0286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0288:	9301      	str	r3, [sp, #4]
 80a028a:	bd08      	pop	{r3, pc}
 80a028c:	080601c4 	.word	0x080601c4

080a0290 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0290:	b508      	push	{r3, lr}
 80a0292:	4b02      	ldr	r3, [pc, #8]	; (80a029c <hal_i2c_write+0xc>)
 80a0294:	681b      	ldr	r3, [r3, #0]
 80a0296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0298:	9301      	str	r3, [sp, #4]
 80a029a:	bd08      	pop	{r3, pc}
 80a029c:	080601ac 	.word	0x080601ac

080a02a0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a02a0:	b508      	push	{r3, lr}
 80a02a2:	4b02      	ldr	r3, [pc, #8]	; (80a02ac <hal_i2c_available+0xc>)
 80a02a4:	681b      	ldr	r3, [r3, #0]
 80a02a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a02a8:	9301      	str	r3, [sp, #4]
 80a02aa:	bd08      	pop	{r3, pc}
 80a02ac:	080601ac 	.word	0x080601ac

080a02b0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a02b0:	b508      	push	{r3, lr}
 80a02b2:	4b02      	ldr	r3, [pc, #8]	; (80a02bc <hal_i2c_read+0xc>)
 80a02b4:	681b      	ldr	r3, [r3, #0]
 80a02b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a02b8:	9301      	str	r3, [sp, #4]
 80a02ba:	bd08      	pop	{r3, pc}
 80a02bc:	080601ac 	.word	0x080601ac

080a02c0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a02c0:	b508      	push	{r3, lr}
 80a02c2:	4b02      	ldr	r3, [pc, #8]	; (80a02cc <hal_i2c_peek+0xc>)
 80a02c4:	681b      	ldr	r3, [r3, #0]
 80a02c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a02c8:	9301      	str	r3, [sp, #4]
 80a02ca:	bd08      	pop	{r3, pc}
 80a02cc:	080601ac 	.word	0x080601ac

080a02d0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a02d0:	b508      	push	{r3, lr}
 80a02d2:	4b02      	ldr	r3, [pc, #8]	; (80a02dc <hal_i2c_flush+0xc>)
 80a02d4:	681b      	ldr	r3, [r3, #0]
 80a02d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a02d8:	9301      	str	r3, [sp, #4]
 80a02da:	bd08      	pop	{r3, pc}
 80a02dc:	080601ac 	.word	0x080601ac

080a02e0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a02e0:	b508      	push	{r3, lr}
 80a02e2:	4b02      	ldr	r3, [pc, #8]	; (80a02ec <hal_i2c_is_enabled+0xc>)
 80a02e4:	681b      	ldr	r3, [r3, #0]
 80a02e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a02e8:	9301      	str	r3, [sp, #4]
 80a02ea:	bd08      	pop	{r3, pc}
 80a02ec:	080601ac 	.word	0x080601ac

080a02f0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a02f0:	b508      	push	{r3, lr}
 80a02f2:	4b03      	ldr	r3, [pc, #12]	; (80a0300 <hal_i2c_init+0x10>)
 80a02f4:	681b      	ldr	r3, [r3, #0]
 80a02f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a02fa:	9301      	str	r3, [sp, #4]
 80a02fc:	bd08      	pop	{r3, pc}
 80a02fe:	0000      	.short	0x0000
 80a0300:	080601ac 	.word	0x080601ac

080a0304 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0304:	b508      	push	{r3, lr}
 80a0306:	4b02      	ldr	r3, [pc, #8]	; (80a0310 <hal_spi_init+0xc>)
 80a0308:	681b      	ldr	r3, [r3, #0]
 80a030a:	69db      	ldr	r3, [r3, #28]
 80a030c:	9301      	str	r3, [sp, #4]
 80a030e:	bd08      	pop	{r3, pc}
 80a0310:	080601b4 	.word	0x080601b4

080a0314 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0314:	b508      	push	{r3, lr}
 80a0316:	4b02      	ldr	r3, [pc, #8]	; (80a0320 <hal_spi_is_enabled+0xc>)
 80a0318:	681b      	ldr	r3, [r3, #0]
 80a031a:	6a1b      	ldr	r3, [r3, #32]
 80a031c:	9301      	str	r3, [sp, #4]
 80a031e:	bd08      	pop	{r3, pc}
 80a0320:	080601b4 	.word	0x080601b4

080a0324 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0324:	b508      	push	{r3, lr}
 80a0326:	4b02      	ldr	r3, [pc, #8]	; (80a0330 <HAL_USB_USART_Init+0xc>)
 80a0328:	681b      	ldr	r3, [r3, #0]
 80a032a:	681b      	ldr	r3, [r3, #0]
 80a032c:	9301      	str	r3, [sp, #4]
 80a032e:	bd08      	pop	{r3, pc}
 80a0330:	080601d8 	.word	0x080601d8

080a0334 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0334:	b508      	push	{r3, lr}
 80a0336:	4b02      	ldr	r3, [pc, #8]	; (80a0340 <HAL_USB_USART_Begin+0xc>)
 80a0338:	681b      	ldr	r3, [r3, #0]
 80a033a:	685b      	ldr	r3, [r3, #4]
 80a033c:	9301      	str	r3, [sp, #4]
 80a033e:	bd08      	pop	{r3, pc}
 80a0340:	080601d8 	.word	0x080601d8

080a0344 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0344:	b508      	push	{r3, lr}
 80a0346:	4b02      	ldr	r3, [pc, #8]	; (80a0350 <HAL_USB_USART_Available_Data+0xc>)
 80a0348:	681b      	ldr	r3, [r3, #0]
 80a034a:	691b      	ldr	r3, [r3, #16]
 80a034c:	9301      	str	r3, [sp, #4]
 80a034e:	bd08      	pop	{r3, pc}
 80a0350:	080601d8 	.word	0x080601d8

080a0354 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0354:	b508      	push	{r3, lr}
 80a0356:	4b02      	ldr	r3, [pc, #8]	; (80a0360 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0358:	681b      	ldr	r3, [r3, #0]
 80a035a:	695b      	ldr	r3, [r3, #20]
 80a035c:	9301      	str	r3, [sp, #4]
 80a035e:	bd08      	pop	{r3, pc}
 80a0360:	080601d8 	.word	0x080601d8

080a0364 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0364:	b508      	push	{r3, lr}
 80a0366:	4b02      	ldr	r3, [pc, #8]	; (80a0370 <HAL_USB_USART_Receive_Data+0xc>)
 80a0368:	681b      	ldr	r3, [r3, #0]
 80a036a:	699b      	ldr	r3, [r3, #24]
 80a036c:	9301      	str	r3, [sp, #4]
 80a036e:	bd08      	pop	{r3, pc}
 80a0370:	080601d8 	.word	0x080601d8

080a0374 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0374:	b508      	push	{r3, lr}
 80a0376:	4b02      	ldr	r3, [pc, #8]	; (80a0380 <HAL_USB_USART_Send_Data+0xc>)
 80a0378:	681b      	ldr	r3, [r3, #0]
 80a037a:	69db      	ldr	r3, [r3, #28]
 80a037c:	9301      	str	r3, [sp, #4]
 80a037e:	bd08      	pop	{r3, pc}
 80a0380:	080601d8 	.word	0x080601d8

080a0384 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0384:	b508      	push	{r3, lr}
 80a0386:	4b02      	ldr	r3, [pc, #8]	; (80a0390 <HAL_USB_USART_Flush_Data+0xc>)
 80a0388:	681b      	ldr	r3, [r3, #0]
 80a038a:	6a1b      	ldr	r3, [r3, #32]
 80a038c:	9301      	str	r3, [sp, #4]
 80a038e:	bd08      	pop	{r3, pc}
 80a0390:	080601d8 	.word	0x080601d8

080a0394 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0394:	b508      	push	{r3, lr}
 80a0396:	4b02      	ldr	r3, [pc, #8]	; (80a03a0 <inet_gethostbyname+0xc>)
 80a0398:	681b      	ldr	r3, [r3, #0]
 80a039a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a039c:	9301      	str	r3, [sp, #4]
 80a039e:	bd08      	pop	{r3, pc}
 80a03a0:	080601c0 	.word	0x080601c0

080a03a4 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 80a03a4:	b508      	push	{r3, lr}
 80a03a6:	4b02      	ldr	r3, [pc, #8]	; (80a03b0 <LED_SetSignalingColor+0xc>)
 80a03a8:	681b      	ldr	r3, [r3, #0]
 80a03aa:	685b      	ldr	r3, [r3, #4]
 80a03ac:	9301      	str	r3, [sp, #4]
 80a03ae:	bd08      	pop	{r3, pc}
 80a03b0:	080201a8 	.word	0x080201a8

080a03b4 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a03b4:	b508      	push	{r3, lr}
 80a03b6:	4b02      	ldr	r3, [pc, #8]	; (80a03c0 <LED_Signaling_Start+0xc>)
 80a03b8:	681b      	ldr	r3, [r3, #0]
 80a03ba:	689b      	ldr	r3, [r3, #8]
 80a03bc:	9301      	str	r3, [sp, #4]
 80a03be:	bd08      	pop	{r3, pc}
 80a03c0:	080201a8 	.word	0x080201a8

080a03c4 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a03c4:	b508      	push	{r3, lr}
 80a03c6:	4b02      	ldr	r3, [pc, #8]	; (80a03d0 <LED_Signaling_Stop+0xc>)
 80a03c8:	681b      	ldr	r3, [r3, #0]
 80a03ca:	68db      	ldr	r3, [r3, #12]
 80a03cc:	9301      	str	r3, [sp, #4]
 80a03ce:	bd08      	pop	{r3, pc}
 80a03d0:	080201a8 	.word	0x080201a8

080a03d4 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a03d4:	b508      	push	{r3, lr}
 80a03d6:	4b02      	ldr	r3, [pc, #8]	; (80a03e0 <LED_RGB_IsOverRidden+0xc>)
 80a03d8:	681b      	ldr	r3, [r3, #0]
 80a03da:	699b      	ldr	r3, [r3, #24]
 80a03dc:	9301      	str	r3, [sp, #4]
 80a03de:	bd08      	pop	{r3, pc}
 80a03e0:	080201a8 	.word	0x080201a8

080a03e4 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 80a03e4:	b508      	push	{r3, lr}
 80a03e6:	4b02      	ldr	r3, [pc, #8]	; (80a03f0 <LED_On+0xc>)
 80a03e8:	681b      	ldr	r3, [r3, #0]
 80a03ea:	69db      	ldr	r3, [r3, #28]
 80a03ec:	9301      	str	r3, [sp, #4]
 80a03ee:	bd08      	pop	{r3, pc}
 80a03f0:	080201a8 	.word	0x080201a8

080a03f4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a03f4:	b508      	push	{r3, lr}
 80a03f6:	4b02      	ldr	r3, [pc, #8]	; (80a0400 <system_mode+0xc>)
 80a03f8:	681b      	ldr	r3, [r3, #0]
 80a03fa:	681b      	ldr	r3, [r3, #0]
 80a03fc:	9301      	str	r3, [sp, #4]
 80a03fe:	bd08      	pop	{r3, pc}
 80a0400:	080601a4 	.word	0x080601a4

080a0404 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0404:	b508      	push	{r3, lr}
 80a0406:	4b02      	ldr	r3, [pc, #8]	; (80a0410 <set_system_mode+0xc>)
 80a0408:	681b      	ldr	r3, [r3, #0]
 80a040a:	685b      	ldr	r3, [r3, #4]
 80a040c:	9301      	str	r3, [sp, #4]
 80a040e:	bd08      	pop	{r3, pc}
 80a0410:	080601a4 	.word	0x080601a4

080a0414 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0414:	b508      	push	{r3, lr}
 80a0416:	4b02      	ldr	r3, [pc, #8]	; (80a0420 <system_delay_ms+0xc>)
 80a0418:	681b      	ldr	r3, [r3, #0]
 80a041a:	695b      	ldr	r3, [r3, #20]
 80a041c:	9301      	str	r3, [sp, #4]
 80a041e:	bd08      	pop	{r3, pc}
 80a0420:	080601a4 	.word	0x080601a4

080a0424 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <system_thread_set_state+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601a4 	.word	0x080601a4

080a0434 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b02      	ldr	r3, [pc, #8]	; (80a0440 <system_thread_get_state+0xc>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a043c:	9301      	str	r3, [sp, #4]
 80a043e:	bd08      	pop	{r3, pc}
 80a0440:	080601a4 	.word	0x080601a4

080a0444 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0444:	b508      	push	{r3, lr}
 80a0446:	4b03      	ldr	r3, [pc, #12]	; (80a0454 <system_ctrl_set_app_request_handler+0x10>)
 80a0448:	681b      	ldr	r3, [r3, #0]
 80a044a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a044e:	9301      	str	r3, [sp, #4]
 80a0450:	bd08      	pop	{r3, pc}
 80a0452:	0000      	.short	0x0000
 80a0454:	080601a4 	.word	0x080601a4

080a0458 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0458:	b508      	push	{r3, lr}
 80a045a:	4b03      	ldr	r3, [pc, #12]	; (80a0468 <system_ctrl_set_result+0x10>)
 80a045c:	681b      	ldr	r3, [r3, #0]
 80a045e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0462:	9301      	str	r3, [sp, #4]
 80a0464:	bd08      	pop	{r3, pc}
 80a0466:	0000      	.short	0x0000
 80a0468:	080601a4 	.word	0x080601a4

080a046c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a046c:	b508      	push	{r3, lr}
 80a046e:	4b02      	ldr	r3, [pc, #8]	; (80a0478 <network_connect+0xc>)
 80a0470:	681b      	ldr	r3, [r3, #0]
 80a0472:	685b      	ldr	r3, [r3, #4]
 80a0474:	9301      	str	r3, [sp, #4]
 80a0476:	bd08      	pop	{r3, pc}
 80a0478:	080601c8 	.word	0x080601c8

080a047c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a047c:	b508      	push	{r3, lr}
 80a047e:	4b02      	ldr	r3, [pc, #8]	; (80a0488 <network_connecting+0xc>)
 80a0480:	681b      	ldr	r3, [r3, #0]
 80a0482:	689b      	ldr	r3, [r3, #8]
 80a0484:	9301      	str	r3, [sp, #4]
 80a0486:	bd08      	pop	{r3, pc}
 80a0488:	080601c8 	.word	0x080601c8

080a048c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a048c:	b508      	push	{r3, lr}
 80a048e:	4b02      	ldr	r3, [pc, #8]	; (80a0498 <network_disconnect+0xc>)
 80a0490:	681b      	ldr	r3, [r3, #0]
 80a0492:	68db      	ldr	r3, [r3, #12]
 80a0494:	9301      	str	r3, [sp, #4]
 80a0496:	bd08      	pop	{r3, pc}
 80a0498:	080601c8 	.word	0x080601c8

080a049c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a049c:	b508      	push	{r3, lr}
 80a049e:	4b02      	ldr	r3, [pc, #8]	; (80a04a8 <network_ready+0xc>)
 80a04a0:	681b      	ldr	r3, [r3, #0]
 80a04a2:	691b      	ldr	r3, [r3, #16]
 80a04a4:	9301      	str	r3, [sp, #4]
 80a04a6:	bd08      	pop	{r3, pc}
 80a04a8:	080601c8 	.word	0x080601c8

080a04ac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04ac:	b508      	push	{r3, lr}
 80a04ae:	4b02      	ldr	r3, [pc, #8]	; (80a04b8 <network_on+0xc>)
 80a04b0:	681b      	ldr	r3, [r3, #0]
 80a04b2:	695b      	ldr	r3, [r3, #20]
 80a04b4:	9301      	str	r3, [sp, #4]
 80a04b6:	bd08      	pop	{r3, pc}
 80a04b8:	080601c8 	.word	0x080601c8

080a04bc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04bc:	b508      	push	{r3, lr}
 80a04be:	4b02      	ldr	r3, [pc, #8]	; (80a04c8 <network_off+0xc>)
 80a04c0:	681b      	ldr	r3, [r3, #0]
 80a04c2:	699b      	ldr	r3, [r3, #24]
 80a04c4:	9301      	str	r3, [sp, #4]
 80a04c6:	bd08      	pop	{r3, pc}
 80a04c8:	080601c8 	.word	0x080601c8

080a04cc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a04cc:	b508      	push	{r3, lr}
 80a04ce:	4b02      	ldr	r3, [pc, #8]	; (80a04d8 <network_listen+0xc>)
 80a04d0:	681b      	ldr	r3, [r3, #0]
 80a04d2:	69db      	ldr	r3, [r3, #28]
 80a04d4:	9301      	str	r3, [sp, #4]
 80a04d6:	bd08      	pop	{r3, pc}
 80a04d8:	080601c8 	.word	0x080601c8

080a04dc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a04dc:	b508      	push	{r3, lr}
 80a04de:	4b02      	ldr	r3, [pc, #8]	; (80a04e8 <network_listening+0xc>)
 80a04e0:	681b      	ldr	r3, [r3, #0]
 80a04e2:	6a1b      	ldr	r3, [r3, #32]
 80a04e4:	9301      	str	r3, [sp, #4]
 80a04e6:	bd08      	pop	{r3, pc}
 80a04e8:	080601c8 	.word	0x080601c8

080a04ec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a04ec:	b508      	push	{r3, lr}
 80a04ee:	4b02      	ldr	r3, [pc, #8]	; (80a04f8 <network_set_listen_timeout+0xc>)
 80a04f0:	681b      	ldr	r3, [r3, #0]
 80a04f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a04f4:	9301      	str	r3, [sp, #4]
 80a04f6:	bd08      	pop	{r3, pc}
 80a04f8:	080601c8 	.word	0x080601c8

080a04fc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a04fc:	b508      	push	{r3, lr}
 80a04fe:	4b02      	ldr	r3, [pc, #8]	; (80a0508 <network_get_listen_timeout+0xc>)
 80a0500:	681b      	ldr	r3, [r3, #0]
 80a0502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0504:	9301      	str	r3, [sp, #4]
 80a0506:	bd08      	pop	{r3, pc}
 80a0508:	080601c8 	.word	0x080601c8

080a050c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a050c:	b508      	push	{r3, lr}
 80a050e:	4b02      	ldr	r3, [pc, #8]	; (80a0518 <network_is_on+0xc>)
 80a0510:	681b      	ldr	r3, [r3, #0]
 80a0512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0514:	9301      	str	r3, [sp, #4]
 80a0516:	bd08      	pop	{r3, pc}
 80a0518:	080601c8 	.word	0x080601c8

080a051c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a051c:	b508      	push	{r3, lr}
 80a051e:	4b02      	ldr	r3, [pc, #8]	; (80a0528 <network_is_off+0xc>)
 80a0520:	681b      	ldr	r3, [r3, #0]
 80a0522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0524:	9301      	str	r3, [sp, #4]
 80a0526:	bd08      	pop	{r3, pc}
 80a0528:	080601c8 	.word	0x080601c8

080a052c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a052c:	b508      	push	{r3, lr}
 80a052e:	4b02      	ldr	r3, [pc, #8]	; (80a0538 <spark_process+0xc>)
 80a0530:	681b      	ldr	r3, [r3, #0]
 80a0532:	689b      	ldr	r3, [r3, #8]
 80a0534:	9301      	str	r3, [sp, #4]
 80a0536:	bd08      	pop	{r3, pc}
 80a0538:	080601cc 	.word	0x080601cc

080a053c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a053c:	b508      	push	{r3, lr}
 80a053e:	4b02      	ldr	r3, [pc, #8]	; (80a0548 <spark_cloud_flag_connected+0xc>)
 80a0540:	681b      	ldr	r3, [r3, #0]
 80a0542:	695b      	ldr	r3, [r3, #20]
 80a0544:	9301      	str	r3, [sp, #4]
 80a0546:	bd08      	pop	{r3, pc}
 80a0548:	080601cc 	.word	0x080601cc

080a054c <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a054c:	b508      	push	{r3, lr}
 80a054e:	4b02      	ldr	r3, [pc, #8]	; (80a0558 <spark_sync_time_pending+0xc>)
 80a0550:	681b      	ldr	r3, [r3, #0]
 80a0552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0554:	9301      	str	r3, [sp, #4]
 80a0556:	bd08      	pop	{r3, pc}
 80a0558:	080601cc 	.word	0x080601cc

080a055c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a055c:	b508      	push	{r3, lr}
 80a055e:	4b02      	ldr	r3, [pc, #8]	; (80a0568 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0560:	681b      	ldr	r3, [r3, #0]
 80a0562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0564:	9301      	str	r3, [sp, #4]
 80a0566:	bd08      	pop	{r3, pc}
 80a0568:	080601cc 	.word	0x080601cc

080a056c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a056c:	b508      	push	{r3, lr}
 80a056e:	4b02      	ldr	r3, [pc, #8]	; (80a0578 <malloc+0xc>)
 80a0570:	681b      	ldr	r3, [r3, #0]
 80a0572:	681b      	ldr	r3, [r3, #0]
 80a0574:	9301      	str	r3, [sp, #4]
 80a0576:	bd08      	pop	{r3, pc}
 80a0578:	080601a0 	.word	0x080601a0

080a057c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a057c:	b508      	push	{r3, lr}
 80a057e:	4b02      	ldr	r3, [pc, #8]	; (80a0588 <free+0xc>)
 80a0580:	681b      	ldr	r3, [r3, #0]
 80a0582:	685b      	ldr	r3, [r3, #4]
 80a0584:	9301      	str	r3, [sp, #4]
 80a0586:	bd08      	pop	{r3, pc}
 80a0588:	080601a0 	.word	0x080601a0

080a058c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a058c:	b508      	push	{r3, lr}
 80a058e:	4b02      	ldr	r3, [pc, #8]	; (80a0598 <realloc+0xc>)
 80a0590:	681b      	ldr	r3, [r3, #0]
 80a0592:	689b      	ldr	r3, [r3, #8]
 80a0594:	9301      	str	r3, [sp, #4]
 80a0596:	bd08      	pop	{r3, pc}
 80a0598:	080601a0 	.word	0x080601a0

080a059c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a059c:	b508      	push	{r3, lr}
 80a059e:	4b02      	ldr	r3, [pc, #8]	; (80a05a8 <siprintf+0xc>)
 80a05a0:	681b      	ldr	r3, [r3, #0]
 80a05a2:	691b      	ldr	r3, [r3, #16]
 80a05a4:	9301      	str	r3, [sp, #4]
 80a05a6:	bd08      	pop	{r3, pc}
 80a05a8:	080601a0 	.word	0x080601a0

080a05ac <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a05ac:	b508      	push	{r3, lr}
 80a05ae:	4b02      	ldr	r3, [pc, #8]	; (80a05b8 <siscanf+0xc>)
 80a05b0:	681b      	ldr	r3, [r3, #0]
 80a05b2:	699b      	ldr	r3, [r3, #24]
 80a05b4:	9301      	str	r3, [sp, #4]
 80a05b6:	bd08      	pop	{r3, pc}
 80a05b8:	080601a0 	.word	0x080601a0

080a05bc <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a05bc:	b508      	push	{r3, lr}
 80a05be:	4b02      	ldr	r3, [pc, #8]	; (80a05c8 <vsnprintf+0xc>)
 80a05c0:	681b      	ldr	r3, [r3, #0]
 80a05c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a05c4:	9301      	str	r3, [sp, #4]
 80a05c6:	bd08      	pop	{r3, pc}
 80a05c8:	080601a0 	.word	0x080601a0

080a05cc <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a05cc:	b508      	push	{r3, lr}
 80a05ce:	4b02      	ldr	r3, [pc, #8]	; (80a05d8 <_malloc_r+0xc>)
 80a05d0:	681b      	ldr	r3, [r3, #0]
 80a05d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a05d4:	9301      	str	r3, [sp, #4]
 80a05d6:	bd08      	pop	{r3, pc}
 80a05d8:	080601a0 	.word	0x080601a0

080a05dc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a05dc:	b508      	push	{r3, lr}
 80a05de:	4b02      	ldr	r3, [pc, #8]	; (80a05e8 <newlib_impure_ptr_callback+0xc>)
 80a05e0:	681b      	ldr	r3, [r3, #0]
 80a05e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a05e4:	9301      	str	r3, [sp, #4]
 80a05e6:	bd08      	pop	{r3, pc}
 80a05e8:	080601a0 	.word	0x080601a0

080a05ec <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a05ec:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a05ee:	2600      	movs	r6, #0
 80a05f0:	4604      	mov	r4, r0
 80a05f2:	460d      	mov	r5, r1
 80a05f4:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a05f8:	f7ff fdfa 	bl	80a01f0 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a05fc:	4628      	mov	r0, r5
    _spi = spi;
 80a05fe:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0600:	f7ff fe80 	bl	80a0304 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0604:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0606:	6066      	str	r6, [r4, #4]
}
 80a0608:	bd70      	pop	{r4, r5, r6, pc}
	...

080a060c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a060c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a060e:	2000      	movs	r0, #0
 80a0610:	4b04      	ldr	r3, [pc, #16]	; (80a0624 <_GLOBAL__sub_I_System+0x18>)
 80a0612:	601a      	str	r2, [r3, #0]
 80a0614:	4b04      	ldr	r3, [pc, #16]	; (80a0628 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a0616:	4a05      	ldr	r2, [pc, #20]	; (80a062c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a0618:	6018      	str	r0, [r3, #0]
 80a061a:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a061c:	7198      	strb	r0, [r3, #6]
 80a061e:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0620:	f7ff bef0 	b.w	80a0404 <set_system_mode>
 80a0624:	200000e8 	.word	0x200000e8
 80a0628:	200000dc 	.word	0x200000dc
 80a062c:	ffff0000 	.word	0xffff0000

080a0630 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0630:	b510      	push	{r4, lr}
 80a0632:	4604      	mov	r4, r0
{
	free(buffer);
 80a0634:	6800      	ldr	r0, [r0, #0]
 80a0636:	f7ff ffa1 	bl	80a057c <free>
}
 80a063a:	4620      	mov	r0, r4
 80a063c:	bd10      	pop	{r4, pc}

080a063e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a063e:	b510      	push	{r4, lr}
 80a0640:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0642:	6800      	ldr	r0, [r0, #0]
 80a0644:	b108      	cbz	r0, 80a064a <_ZN6String10invalidateEv+0xc>
 80a0646:	f7ff ff99 	bl	80a057c <free>
	buffer = NULL;
 80a064a:	2300      	movs	r3, #0
	capacity = len = 0;
 80a064c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a0650:	6023      	str	r3, [r4, #0]
}
 80a0652:	bd10      	pop	{r4, pc}

080a0654 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0654:	b538      	push	{r3, r4, r5, lr}
 80a0656:	4604      	mov	r4, r0
 80a0658:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a065a:	6800      	ldr	r0, [r0, #0]
 80a065c:	3101      	adds	r1, #1
 80a065e:	f7ff ff95 	bl	80a058c <realloc>
	if (newbuffer) {
 80a0662:	b110      	cbz	r0, 80a066a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0664:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a0668:	2001      	movs	r0, #1
	}
	return 0;
}
 80a066a:	bd38      	pop	{r3, r4, r5, pc}

080a066c <_ZN6String7reserveEj>:
{
 80a066c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a066e:	6803      	ldr	r3, [r0, #0]
{
 80a0670:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0672:	b123      	cbz	r3, 80a067e <_ZN6String7reserveEj+0x12>
 80a0674:	6843      	ldr	r3, [r0, #4]
 80a0676:	428b      	cmp	r3, r1
 80a0678:	d301      	bcc.n	80a067e <_ZN6String7reserveEj+0x12>
 80a067a:	2001      	movs	r0, #1
}
 80a067c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a067e:	4620      	mov	r0, r4
 80a0680:	f7ff ffe8 	bl	80a0654 <_ZN6String12changeBufferEj>
 80a0684:	2800      	cmp	r0, #0
 80a0686:	d0f9      	beq.n	80a067c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a0688:	68a3      	ldr	r3, [r4, #8]
 80a068a:	2b00      	cmp	r3, #0
 80a068c:	d1f5      	bne.n	80a067a <_ZN6String7reserveEj+0xe>
 80a068e:	6822      	ldr	r2, [r4, #0]
 80a0690:	7013      	strb	r3, [r2, #0]
 80a0692:	e7f2      	b.n	80a067a <_ZN6String7reserveEj+0xe>

080a0694 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0694:	b570      	push	{r4, r5, r6, lr}
 80a0696:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0698:	4611      	mov	r1, r2
{
 80a069a:	4604      	mov	r4, r0
 80a069c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a069e:	f7ff ffe5 	bl	80a066c <_ZN6String7reserveEj>
 80a06a2:	b920      	cbnz	r0, 80a06ae <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a06a4:	4620      	mov	r0, r4
 80a06a6:	f7ff ffca 	bl	80a063e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a06aa:	4620      	mov	r0, r4
 80a06ac:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a06ae:	462a      	mov	r2, r5
 80a06b0:	4631      	mov	r1, r6
 80a06b2:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a06b4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a06b6:	f000 fff7 	bl	80a16a8 <memcpy>
	buffer[len] = 0;
 80a06ba:	2100      	movs	r1, #0
 80a06bc:	6822      	ldr	r2, [r4, #0]
 80a06be:	68a3      	ldr	r3, [r4, #8]
 80a06c0:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a06c2:	e7f2      	b.n	80a06aa <_ZN6String4copyEPKcj+0x16>

080a06c4 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a06c4:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a06c6:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a06c8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a06ca:	460d      	mov	r5, r1
	capacity = 0;
 80a06cc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a06d0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a06d2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a06d4:	b139      	cbz	r1, 80a06e6 <_ZN6StringC1EPKc+0x22>
 80a06d6:	4608      	mov	r0, r1
 80a06d8:	f001 f832 	bl	80a1740 <strlen>
 80a06dc:	4629      	mov	r1, r5
 80a06de:	4602      	mov	r2, r0
 80a06e0:	4620      	mov	r0, r4
 80a06e2:	f7ff ffd7 	bl	80a0694 <_ZN6String4copyEPKcj>
}
 80a06e6:	4620      	mov	r0, r4
 80a06e8:	bd38      	pop	{r3, r4, r5, pc}

080a06ea <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a06ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a06ec:	4606      	mov	r6, r0
 80a06ee:	460d      	mov	r5, r1
  size_t n = 0;
 80a06f0:	2400      	movs	r4, #0
 80a06f2:	188f      	adds	r7, r1, r2
  while (size--) {
 80a06f4:	42bd      	cmp	r5, r7
 80a06f6:	d00c      	beq.n	80a0712 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a06f8:	6833      	ldr	r3, [r6, #0]
 80a06fa:	4630      	mov	r0, r6
 80a06fc:	689b      	ldr	r3, [r3, #8]
 80a06fe:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0702:	4798      	blx	r3
     if (chunk>=0)
 80a0704:	1e03      	subs	r3, r0, #0
 80a0706:	db01      	blt.n	80a070c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0708:	441c      	add	r4, r3
  while (size--) {
 80a070a:	e7f3      	b.n	80a06f4 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a070c:	2c00      	cmp	r4, #0
 80a070e:	bf08      	it	eq
 80a0710:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0712:	4620      	mov	r0, r4
 80a0714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0716 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0716:	b570      	push	{r4, r5, r6, lr}
 80a0718:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a071a:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a071c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a071e:	b149      	cbz	r1, 80a0734 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0720:	f001 f80e 	bl	80a1740 <strlen>
 80a0724:	682b      	ldr	r3, [r5, #0]
 80a0726:	4602      	mov	r2, r0
 80a0728:	4621      	mov	r1, r4
 80a072a:	4628      	mov	r0, r5
    }
 80a072c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0730:	68db      	ldr	r3, [r3, #12]
 80a0732:	4718      	bx	r3
    }
 80a0734:	bd70      	pop	{r4, r5, r6, pc}

080a0736 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0736:	6803      	ldr	r3, [r0, #0]
 80a0738:	689b      	ldr	r3, [r3, #8]
 80a073a:	4718      	bx	r3

080a073c <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a073c:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a073e:	210d      	movs	r1, #13
{
 80a0740:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0742:	f7ff fff8 	bl	80a0736 <_ZN5Print5printEc>
  n += print('\n');
 80a0746:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0748:	4604      	mov	r4, r0
  n += print('\n');
 80a074a:	4628      	mov	r0, r5
 80a074c:	f7ff fff3 	bl	80a0736 <_ZN5Print5printEc>
  return n;
}
 80a0750:	4420      	add	r0, r4
 80a0752:	bd38      	pop	{r3, r4, r5, pc}

080a0754 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0754:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0756:	2a01      	cmp	r2, #1
 80a0758:	bf98      	it	ls
 80a075a:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a075c:	b530      	push	{r4, r5, lr}
 80a075e:	b08b      	sub	sp, #44	; 0x2c
 80a0760:	460c      	mov	r4, r1
  *str = '\0';
 80a0762:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0766:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0768:	4625      	mov	r5, r4
 80a076a:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a076e:	fb04 5312 	mls	r3, r4, r2, r5
 80a0772:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0774:	2b09      	cmp	r3, #9
 80a0776:	bf94      	ite	ls
 80a0778:	3330      	addls	r3, #48	; 0x30
 80a077a:	3337      	addhi	r3, #55	; 0x37
 80a077c:	b2db      	uxtb	r3, r3
  } while(n);
 80a077e:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0780:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0784:	d9f0      	bls.n	80a0768 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0786:	f7ff ffc6 	bl	80a0716 <_ZN5Print5writeEPKc>
}
 80a078a:	b00b      	add	sp, #44	; 0x2c
 80a078c:	bd30      	pop	{r4, r5, pc}

080a078e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a078e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0792:	b086      	sub	sp, #24
 80a0794:	af00      	add	r7, sp, #0
 80a0796:	4605      	mov	r5, r0
 80a0798:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a079a:	1d38      	adds	r0, r7, #4
 80a079c:	2114      	movs	r1, #20
{
 80a079e:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a07a0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a07a2:	f7ff ff0b 	bl	80a05bc <vsnprintf>

    if (n<bufsize)
 80a07a6:	2813      	cmp	r0, #19
 80a07a8:	d80e      	bhi.n	80a07c8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a07aa:	4628      	mov	r0, r5
 80a07ac:	1d39      	adds	r1, r7, #4
 80a07ae:	f7ff ffb2 	bl	80a0716 <_ZN5Print5writeEPKc>
 80a07b2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a07b4:	b11e      	cbz	r6, 80a07be <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a07b6:	4628      	mov	r0, r5
 80a07b8:	f7ff ffc0 	bl	80a073c <_ZN5Print7printlnEv>
 80a07bc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a07be:	4620      	mov	r0, r4
 80a07c0:	3718      	adds	r7, #24
 80a07c2:	46bd      	mov	sp, r7
 80a07c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a07c8:	f100 0308 	add.w	r3, r0, #8
 80a07cc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a07d0:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a07d2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a07d6:	4622      	mov	r2, r4
 80a07d8:	1c41      	adds	r1, r0, #1
 80a07da:	683b      	ldr	r3, [r7, #0]
 80a07dc:	4668      	mov	r0, sp
 80a07de:	f7ff feed 	bl	80a05bc <vsnprintf>
  return write(str);
 80a07e2:	4669      	mov	r1, sp
 80a07e4:	4628      	mov	r0, r5
 80a07e6:	f7ff ff96 	bl	80a0716 <_ZN5Print5writeEPKc>
 80a07ea:	4604      	mov	r4, r0
 80a07ec:	46c5      	mov	sp, r8
 80a07ee:	e7e1      	b.n	80a07b4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a07f0 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a07f0:	2300      	movs	r3, #0
 80a07f2:	6840      	ldr	r0, [r0, #4]
 80a07f4:	461a      	mov	r2, r3
 80a07f6:	4619      	mov	r1, r3
 80a07f8:	f7ff be58 	b.w	80a04ac <network_on>

080a07fc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a07fc:	4b01      	ldr	r3, [pc, #4]	; (80a0804 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a07fe:	4a02      	ldr	r2, [pc, #8]	; (80a0808 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0800:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0802:	4770      	bx	lr
 80a0804:	200000ec 	.word	0x200000ec
 80a0808:	080a2090 	.word	0x080a2090

080a080c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a080c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a080e:	2000      	movs	r0, #0
 80a0810:	f7ff fe9c 	bl	80a054c <spark_sync_time_pending>
 80a0814:	b128      	cbz	r0, 80a0822 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0816:	f7ff fe91 	bl	80a053c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a081a:	f080 0001 	eor.w	r0, r0, #1
 80a081e:	b2c0      	uxtb	r0, r0
    }
 80a0820:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a0822:	2001      	movs	r0, #1
 80a0824:	e7fc      	b.n	80a0820 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a0828 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a0828:	b530      	push	{r4, r5, lr}
 80a082a:	4604      	mov	r4, r0
    t += time_zone_cache;
 80a082c:	4818      	ldr	r0, [pc, #96]	; (80a0890 <_ZN9TimeClass7timeStrEx+0x68>)
{
 80a082e:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 80a0830:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a0834:	1852      	adds	r2, r2, r1
 80a0836:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 80a083a:	4816      	ldr	r0, [pc, #88]	; (80a0894 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 80a083c:	2500      	movs	r5, #0
    t += dst_current_cache;
 80a083e:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a0842:	1852      	adds	r2, r2, r1
 80a0844:	eb40 0303 	adc.w	r3, r0, r3
 80a0848:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 80a084c:	2224      	movs	r2, #36	; 0x24
 80a084e:	2100      	movs	r1, #0
 80a0850:	eb0d 0002 	add.w	r0, sp, r2
 80a0854:	f000 ff36 	bl	80a16c4 <memset>
    localtime_r(&t, &calendar_time);
 80a0858:	a909      	add	r1, sp, #36	; 0x24
 80a085a:	4668      	mov	r0, sp
 80a085c:	f000 fe2e 	bl	80a14bc <localtime_r>
    char ascstr[26] = {};
 80a0860:	2216      	movs	r2, #22
 80a0862:	4629      	mov	r1, r5
 80a0864:	a803      	add	r0, sp, #12
 80a0866:	9502      	str	r5, [sp, #8]
 80a0868:	f000 ff2c 	bl	80a16c4 <memset>
    asctime_r(&calendar_time, ascstr);
 80a086c:	a902      	add	r1, sp, #8
 80a086e:	a809      	add	r0, sp, #36	; 0x24
 80a0870:	f000 fdf8 	bl	80a1464 <asctime_r>
    int len = strlen(ascstr);
 80a0874:	a802      	add	r0, sp, #8
 80a0876:	f000 ff63 	bl	80a1740 <strlen>
    ascstr[len-1] = 0; // remove final newline
 80a087a:	ab12      	add	r3, sp, #72	; 0x48
 80a087c:	4418      	add	r0, r3
 80a087e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80a0882:	a902      	add	r1, sp, #8
 80a0884:	4620      	mov	r0, r4
 80a0886:	f7ff ff1d 	bl	80a06c4 <_ZN6StringC1EPKc>
}
 80a088a:	4620      	mov	r0, r4
 80a088c:	b013      	add	sp, #76	; 0x4c
 80a088e:	bd30      	pop	{r4, r5, pc}
 80a0890:	20000100 	.word	0x20000100
 80a0894:	200000f8 	.word	0x200000f8

080a0898 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a0898:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a089a:	2000      	movs	r0, #0
 80a089c:	f7ff fc98 	bl	80a01d0 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a08a0:	4604      	mov	r4, r0
 80a08a2:	b9a0      	cbnz	r0, 80a08ce <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a08a4:	f7ff fda6 	bl	80a03f4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a08a8:	2801      	cmp	r0, #1
 80a08aa:	d110      	bne.n	80a08ce <_ZN9TimeClass7isValidEv+0x36>
 80a08ac:	4620      	mov	r0, r4
 80a08ae:	f7ff fdc1 	bl	80a0434 <system_thread_get_state>
 80a08b2:	b960      	cbnz	r0, 80a08ce <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a08b4:	f7ff ffaa 	bl	80a080c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a08b8:	b910      	cbnz	r0, 80a08c0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a08ba:	f7ff fe37 	bl	80a052c <spark_process>
        while (_while() && !_condition()) {
 80a08be:	e7f9      	b.n	80a08b4 <_ZN9TimeClass7isValidEv+0x1c>
 80a08c0:	f7ff ffa4 	bl	80a080c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a08c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a08c8:	2000      	movs	r0, #0
 80a08ca:	f7ff bc81 	b.w	80a01d0 <hal_rtc_time_is_valid>
}
 80a08ce:	4620      	mov	r0, r4
 80a08d0:	bd10      	pop	{r4, pc}

080a08d2 <_ZN9TimeClass3nowEv>:
{
 80a08d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a08d4:	f7ff ffe0 	bl	80a0898 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a08d8:	2210      	movs	r2, #16
 80a08da:	2100      	movs	r1, #0
 80a08dc:	4668      	mov	r0, sp
 80a08de:	f000 fef1 	bl	80a16c4 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a08e2:	2100      	movs	r1, #0
 80a08e4:	4668      	mov	r0, sp
 80a08e6:	f7ff fc7b 	bl	80a01e0 <hal_rtc_get_time>
}
 80a08ea:	9800      	ldr	r0, [sp, #0]
 80a08ec:	b005      	add	sp, #20
 80a08ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a08f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a08f4:	4b02      	ldr	r3, [pc, #8]	; (80a0900 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a08f6:	681a      	ldr	r2, [r3, #0]
 80a08f8:	4b02      	ldr	r3, [pc, #8]	; (80a0904 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a08fa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a08fc:	4770      	bx	lr
 80a08fe:	bf00      	nop
 80a0900:	20000004 	.word	0x20000004
 80a0904:	200000f0 	.word	0x200000f0

080a0908 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0908:	2100      	movs	r1, #0
 80a090a:	f7ff bd83 	b.w	80a0414 <system_delay_ms>

080a090e <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a090e:	b510      	push	{r4, lr}
 80a0910:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
 80a0912:	f7ff fd5f 	bl	80a03d4 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
 80a0916:	4284      	cmp	r4, r0
 80a0918:	d008      	beq.n	80a092c <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 80a091a:	b11c      	cbz	r4, 80a0924 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 80a091c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
 80a0920:	f7ff bd48 	b.w	80a03b4 <LED_Signaling_Start>
}
 80a0924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
 80a0928:	f7ff bd4c 	b.w	80a03c4 <LED_Signaling_Stop>
}
 80a092c:	bd10      	pop	{r4, pc}

080a092e <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 80a092e:	b570      	push	{r4, r5, r6, lr}
 80a0930:	4605      	mov	r5, r0
 80a0932:	460e      	mov	r6, r1
 80a0934:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
 80a0936:	f7ff fd4d 	bl	80a03d4 <LED_RGB_IsOverRidden>
    if (!controlled()) {
 80a093a:	b150      	cbz	r0, 80a0952 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 80a093c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80a0940:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
 80a0944:	f7ff fd2e 	bl	80a03a4 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 80a0948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
 80a094c:	20e7      	movs	r0, #231	; 0xe7
 80a094e:	f7ff bd49 	b.w	80a03e4 <LED_On>
}
 80a0952:	bd70      	pop	{r4, r5, r6, pc}

080a0954 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0954:	2200      	movs	r2, #0
 80a0956:	4b01      	ldr	r3, [pc, #4]	; (80a095c <_GLOBAL__sub_I_RGB+0x8>)
 80a0958:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a095a:	4770      	bx	lr
 80a095c:	20000108 	.word	0x20000108

080a0960 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0960:	4b01      	ldr	r3, [pc, #4]	; (80a0968 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a0962:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0964:	4770      	bx	lr
 80a0966:	bf00      	nop
 80a0968:	20000008 	.word	0x20000008

080a096c <serialEventRun>:
{
 80a096c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a096e:	4b13      	ldr	r3, [pc, #76]	; (80a09bc <serialEventRun+0x50>)
 80a0970:	b143      	cbz	r3, 80a0984 <serialEventRun+0x18>
 80a0972:	f000 f975 	bl	80a0c60 <_Z16_fetch_usbserialv>
 80a0976:	6803      	ldr	r3, [r0, #0]
 80a0978:	691b      	ldr	r3, [r3, #16]
 80a097a:	4798      	blx	r3
 80a097c:	2800      	cmp	r0, #0
 80a097e:	dd01      	ble.n	80a0984 <serialEventRun+0x18>
        serialEvent();
 80a0980:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a0984:	4b0e      	ldr	r3, [pc, #56]	; (80a09c0 <serialEventRun+0x54>)
 80a0986:	b143      	cbz	r3, 80a099a <serialEventRun+0x2e>
 80a0988:	f000 fa1a 	bl	80a0dc0 <_Z22__fetch_global_Serial1v>
 80a098c:	6803      	ldr	r3, [r0, #0]
 80a098e:	691b      	ldr	r3, [r3, #16]
 80a0990:	4798      	blx	r3
 80a0992:	2800      	cmp	r0, #0
 80a0994:	dd01      	ble.n	80a099a <serialEventRun+0x2e>
        serialEvent1();
 80a0996:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a099a:	4b0a      	ldr	r3, [pc, #40]	; (80a09c4 <serialEventRun+0x58>)
 80a099c:	b10b      	cbz	r3, 80a09a2 <serialEventRun+0x36>
 80a099e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a09a2:	4b09      	ldr	r3, [pc, #36]	; (80a09c8 <serialEventRun+0x5c>)
 80a09a4:	b143      	cbz	r3, 80a09b8 <serialEventRun+0x4c>
 80a09a6:	f000 f995 	bl	80a0cd4 <_Z17_fetch_usbserial1v>
 80a09aa:	6803      	ldr	r3, [r0, #0]
 80a09ac:	691b      	ldr	r3, [r3, #16]
 80a09ae:	4798      	blx	r3
 80a09b0:	2800      	cmp	r0, #0
 80a09b2:	dd01      	ble.n	80a09b8 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a09b4:	f3af 8000 	nop.w
}
 80a09b8:	bd08      	pop	{r3, pc}
 80a09ba:	bf00      	nop
	...

080a09cc <_post_loop>:
{
 80a09cc:	b508      	push	{r3, lr}
	serialEventRun();
 80a09ce:	f7ff ffcd 	bl	80a096c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a09d2:	f7ff fbf5 	bl	80a01c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a09d6:	4b01      	ldr	r3, [pc, #4]	; (80a09dc <_post_loop+0x10>)
 80a09d8:	6018      	str	r0, [r3, #0]
}
 80a09da:	bd08      	pop	{r3, pc}
 80a09dc:	20000594 	.word	0x20000594

080a09e0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a09e0:	4805      	ldr	r0, [pc, #20]	; (80a09f8 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a09e2:	4a06      	ldr	r2, [pc, #24]	; (80a09fc <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a09e4:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a09e6:	1a12      	subs	r2, r2, r0
 80a09e8:	4905      	ldr	r1, [pc, #20]	; (80a0a00 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a09ea:	f000 fe5d 	bl	80a16a8 <memcpy>
    __backup_sram_signature = signature;
 80a09ee:	4b05      	ldr	r3, [pc, #20]	; (80a0a04 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a09f0:	4a05      	ldr	r2, [pc, #20]	; (80a0a08 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a09f2:	601a      	str	r2, [r3, #0]
}
 80a09f4:	bd08      	pop	{r3, pc}
 80a09f6:	bf00      	nop
 80a09f8:	40024000 	.word	0x40024000
 80a09fc:	40024004 	.word	0x40024004
 80a0a00:	080a23e8 	.word	0x080a23e8
 80a0a04:	40024000 	.word	0x40024000
 80a0a08:	9a271c1e 	.word	0x9a271c1e

080a0a0c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0a0c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0a0e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0a10:	461a      	mov	r2, r3
 80a0a12:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0a16:	9300      	str	r3, [sp, #0]
 80a0a18:	f7ff fd1e 	bl	80a0458 <system_ctrl_set_result>
}
 80a0a1c:	b003      	add	sp, #12
 80a0a1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0a24 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0a24:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0a26:	8843      	ldrh	r3, [r0, #2]
 80a0a28:	2b0a      	cmp	r3, #10
 80a0a2a:	d008      	beq.n	80a0a3e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0a2c:	2b50      	cmp	r3, #80	; 0x50
 80a0a2e:	d10b      	bne.n	80a0a48 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0a30:	4b09      	ldr	r3, [pc, #36]	; (80a0a58 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0a32:	681b      	ldr	r3, [r3, #0]
 80a0a34:	b14b      	cbz	r3, 80a0a4a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a0a36:	b003      	add	sp, #12
 80a0a38:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0a3c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a0a3e:	f7ff ffe5 	bl	80a0a0c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a0a42:	b003      	add	sp, #12
 80a0a44:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0a48:	2300      	movs	r3, #0
 80a0a4a:	461a      	mov	r2, r3
 80a0a4c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0a50:	9300      	str	r3, [sp, #0]
 80a0a52:	f7ff fd01 	bl	80a0458 <system_ctrl_set_result>
}
 80a0a56:	e7f4      	b.n	80a0a42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a0a58:	2000011c 	.word	0x2000011c

080a0a5c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0a5c:	2100      	movs	r1, #0
{
 80a0a5e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0a60:	4811      	ldr	r0, [pc, #68]	; (80a0aa8 <module_user_init_hook+0x4c>)
 80a0a62:	f7ff fdbb 	bl	80a05dc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a0a66:	4b11      	ldr	r3, [pc, #68]	; (80a0aac <module_user_init_hook+0x50>)
 80a0a68:	681a      	ldr	r2, [r3, #0]
 80a0a6a:	4b11      	ldr	r3, [pc, #68]	; (80a0ab0 <module_user_init_hook+0x54>)
 80a0a6c:	429a      	cmp	r2, r3
 80a0a6e:	bf0c      	ite	eq
 80a0a70:	2201      	moveq	r2, #1
 80a0a72:	2200      	movne	r2, #0
 80a0a74:	4b0f      	ldr	r3, [pc, #60]	; (80a0ab4 <module_user_init_hook+0x58>)
 80a0a76:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0a78:	d001      	beq.n	80a0a7e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a0a7a:	f7ff ffb1 	bl	80a09e0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0a7e:	f7ff fb97 	bl	80a01b0 <HAL_RNG_GetRandomNumber>
 80a0a82:	4604      	mov	r4, r0
    srand(seed);
 80a0a84:	f000 fe26 	bl	80a16d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0a88:	4b0b      	ldr	r3, [pc, #44]	; (80a0ab8 <module_user_init_hook+0x5c>)
 80a0a8a:	b113      	cbz	r3, 80a0a92 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a0a8c:	4620      	mov	r0, r4
 80a0a8e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0a92:	2100      	movs	r1, #0
 80a0a94:	4808      	ldr	r0, [pc, #32]	; (80a0ab8 <module_user_init_hook+0x5c>)
 80a0a96:	f7ff fd61 	bl	80a055c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0a9e:	2100      	movs	r1, #0
 80a0aa0:	4806      	ldr	r0, [pc, #24]	; (80a0abc <module_user_init_hook+0x60>)
 80a0aa2:	f7ff bccf 	b.w	80a0444 <system_ctrl_set_app_request_handler>
 80a0aa6:	bf00      	nop
 80a0aa8:	080a0961 	.word	0x080a0961
 80a0aac:	40024000 	.word	0x40024000
 80a0ab0:	9a271c1e 	.word	0x9a271c1e
 80a0ab4:	20000118 	.word	0x20000118
 80a0ab8:	00000000 	.word	0x00000000
 80a0abc:	080a0a25 	.word	0x080a0a25

080a0ac0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0ac0:	4770      	bx	lr

080a0ac2 <_ZN9IPAddressD0Ev>:
 80a0ac2:	b510      	push	{r4, lr}
 80a0ac4:	4604      	mov	r4, r0
 80a0ac6:	2118      	movs	r1, #24
 80a0ac8:	f000 fb64 	bl	80a1194 <_ZdlPvj>
 80a0acc:	4620      	mov	r0, r4
 80a0ace:	bd10      	pop	{r4, pc}

080a0ad0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ad2:	460e      	mov	r6, r1
 80a0ad4:	2400      	movs	r4, #0
 80a0ad6:	f100 0708 	add.w	r7, r0, #8
 80a0ada:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0adc:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0ae0:	220a      	movs	r2, #10
 80a0ae2:	4630      	mov	r0, r6
 80a0ae4:	f7ff fe36 	bl	80a0754 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0ae8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0aea:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0aec:	d101      	bne.n	80a0af2 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0aee:	4620      	mov	r0, r4
 80a0af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0af2:	2c00      	cmp	r4, #0
 80a0af4:	d0f2      	beq.n	80a0adc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0af6:	212e      	movs	r1, #46	; 0x2e
 80a0af8:	4630      	mov	r0, r6
 80a0afa:	f7ff fe1c 	bl	80a0736 <_ZN5Print5printEc>
 80a0afe:	4404      	add	r4, r0
 80a0b00:	e7ec      	b.n	80a0adc <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a0b04 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0b04:	b510      	push	{r4, lr}
 80a0b06:	4604      	mov	r4, r0
 80a0b08:	4b04      	ldr	r3, [pc, #16]	; (80a0b1c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0b0a:	2211      	movs	r2, #17
 80a0b0c:	2100      	movs	r1, #0
 80a0b0e:	f840 3b04 	str.w	r3, [r0], #4
 80a0b12:	f000 fdd7 	bl	80a16c4 <memset>
}
 80a0b16:	4620      	mov	r0, r4
 80a0b18:	bd10      	pop	{r4, pc}
 80a0b1a:	bf00      	nop
 80a0b1c:	080a20b8 	.word	0x080a20b8

080a0b20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0b20:	4603      	mov	r3, r0
 80a0b22:	4a07      	ldr	r2, [pc, #28]	; (80a0b40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0b24:	b510      	push	{r4, lr}
 80a0b26:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0b2a:	f101 0210 	add.w	r2, r1, #16
 80a0b2e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0b32:	4291      	cmp	r1, r2
 80a0b34:	f843 4b04 	str.w	r4, [r3], #4
 80a0b38:	d1f9      	bne.n	80a0b2e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0b3a:	780a      	ldrb	r2, [r1, #0]
 80a0b3c:	701a      	strb	r2, [r3, #0]
}
 80a0b3e:	bd10      	pop	{r4, pc}
 80a0b40:	080a20b8 	.word	0x080a20b8

080a0b44 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a0b44:	4a02      	ldr	r2, [pc, #8]	; (80a0b50 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a0b46:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0b4a:	2204      	movs	r2, #4
 80a0b4c:	7502      	strb	r2, [r0, #20]
}
 80a0b4e:	4770      	bx	lr
 80a0b50:	080a20b8 	.word	0x080a20b8

080a0b54 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0b54:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0b56:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0b5a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0b5e:	2304      	movs	r3, #4
 80a0b60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0b64:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0b68:	6044      	str	r4, [r0, #4]
 80a0b6a:	7503      	strb	r3, [r0, #20]
}
 80a0b6c:	bd10      	pop	{r4, pc}
	...

080a0b70 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0b72:	4d04      	ldr	r5, [pc, #16]	; (80a0b84 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0b74:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0b76:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0b7a:	9500      	str	r5, [sp, #0]
 80a0b7c:	f7ff ffea 	bl	80a0b54 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0b80:	b003      	add	sp, #12
 80a0b82:	bd30      	pop	{r4, r5, pc}
 80a0b84:	080a20b8 	.word	0x080a20b8

080a0b88 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0b88:	7441      	strb	r1, [r0, #17]
}
 80a0b8a:	4770      	bx	lr

080a0b8c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0b8c:	4770      	bx	lr

080a0b8e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0b8e:	4770      	bx	lr

080a0b90 <_ZN9USBSerial4readEv>:
{
 80a0b90:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0b92:	2100      	movs	r1, #0
 80a0b94:	7c00      	ldrb	r0, [r0, #16]
 80a0b96:	f7ff fbe5 	bl	80a0364 <HAL_USB_USART_Receive_Data>
}
 80a0b9a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0b9e:	bd08      	pop	{r3, pc}

080a0ba0 <_ZN9USBSerial4peekEv>:
{
 80a0ba0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0ba2:	2101      	movs	r1, #1
 80a0ba4:	7c00      	ldrb	r0, [r0, #16]
 80a0ba6:	f7ff fbdd 	bl	80a0364 <HAL_USB_USART_Receive_Data>
}
 80a0baa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0bae:	bd08      	pop	{r3, pc}

080a0bb0 <_ZN9USBSerial17availableForWriteEv>:
{
 80a0bb0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0bb2:	7c00      	ldrb	r0, [r0, #16]
 80a0bb4:	f7ff fbce 	bl	80a0354 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0bb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0bbc:	bd08      	pop	{r3, pc}

080a0bbe <_ZN9USBSerial9availableEv>:
{
 80a0bbe:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0bc0:	7c00      	ldrb	r0, [r0, #16]
 80a0bc2:	f7ff fbbf 	bl	80a0344 <HAL_USB_USART_Available_Data>
}
 80a0bc6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0bca:	bd08      	pop	{r3, pc}

080a0bcc <_ZN9USBSerial5writeEh>:
{
 80a0bcc:	b538      	push	{r3, r4, r5, lr}
 80a0bce:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0bd0:	7c00      	ldrb	r0, [r0, #16]
{
 80a0bd2:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0bd4:	f7ff fbbe 	bl	80a0354 <HAL_USB_USART_Available_Data_For_Write>
 80a0bd8:	2800      	cmp	r0, #0
 80a0bda:	dc01      	bgt.n	80a0be0 <_ZN9USBSerial5writeEh+0x14>
 80a0bdc:	7c60      	ldrb	r0, [r4, #17]
 80a0bde:	b128      	cbz	r0, 80a0bec <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0be0:	4629      	mov	r1, r5
 80a0be2:	7c20      	ldrb	r0, [r4, #16]
 80a0be4:	f7ff fbc6 	bl	80a0374 <HAL_USB_USART_Send_Data>
 80a0be8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0bec:	bd38      	pop	{r3, r4, r5, pc}

080a0bee <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0bee:	7c00      	ldrb	r0, [r0, #16]
 80a0bf0:	f7ff bbc8 	b.w	80a0384 <HAL_USB_USART_Flush_Data>

080a0bf4 <_ZN9USBSerialD0Ev>:
 80a0bf4:	b510      	push	{r4, lr}
 80a0bf6:	4604      	mov	r4, r0
 80a0bf8:	2114      	movs	r1, #20
 80a0bfa:	f000 facb 	bl	80a1194 <_ZdlPvj>
 80a0bfe:	4620      	mov	r0, r4
 80a0c00:	bd10      	pop	{r4, pc}

080a0c02 <__tcf_1>:
 80a0c02:	4770      	bx	lr

080a0c04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0c04:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0c0a:	4604      	mov	r4, r0
 80a0c0c:	4608      	mov	r0, r1
 80a0c0e:	2100      	movs	r1, #0
 80a0c10:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0c14:	4b04      	ldr	r3, [pc, #16]	; (80a0c28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a0c16:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0c18:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0c1a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0c1c:	4611      	mov	r1, r2
  _blocking = true;
 80a0c1e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0c20:	f7ff fb80 	bl	80a0324 <HAL_USB_USART_Init>
}
 80a0c24:	4620      	mov	r0, r4
 80a0c26:	bd10      	pop	{r4, pc}
 80a0c28:	080a20cc 	.word	0x080a20cc

080a0c2c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0c2c:	2200      	movs	r2, #0
 80a0c2e:	7c00      	ldrb	r0, [r0, #16]
 80a0c30:	f7ff bb80 	b.w	80a0334 <HAL_USB_USART_Begin>

080a0c34 <_Z19acquireSerialBufferv>:
{
 80a0c34:	b510      	push	{r4, lr}
 80a0c36:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0c38:	2214      	movs	r2, #20
 80a0c3a:	2100      	movs	r1, #0
 80a0c3c:	f000 fd42 	bl	80a16c4 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a0c40:	4b05      	ldr	r3, [pc, #20]	; (80a0c58 <_Z19acquireSerialBufferv+0x24>)
}
 80a0c42:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a0c44:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0c46:	4b05      	ldr	r3, [pc, #20]	; (80a0c5c <_Z19acquireSerialBufferv+0x28>)
 80a0c48:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0c4a:	f240 1301 	movw	r3, #257	; 0x101
 80a0c4e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0c50:	2381      	movs	r3, #129	; 0x81
 80a0c52:	8223      	strh	r3, [r4, #16]
}
 80a0c54:	bd10      	pop	{r4, pc}
 80a0c56:	bf00      	nop
 80a0c58:	20000150 	.word	0x20000150
 80a0c5c:	20000251 	.word	0x20000251

080a0c60 <_Z16_fetch_usbserialv>:
{
 80a0c60:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0c62:	4d0e      	ldr	r5, [pc, #56]	; (80a0c9c <_Z16_fetch_usbserialv+0x3c>)
{
 80a0c64:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0c66:	a801      	add	r0, sp, #4
 80a0c68:	f7ff ffe4 	bl	80a0c34 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0c6c:	7829      	ldrb	r1, [r5, #0]
 80a0c6e:	f3bf 8f5b 	dmb	ish
 80a0c72:	f011 0401 	ands.w	r4, r1, #1
 80a0c76:	d10e      	bne.n	80a0c96 <_Z16_fetch_usbserialv+0x36>
 80a0c78:	4628      	mov	r0, r5
 80a0c7a:	f7ff fa10 	bl	80a009e <__cxa_guard_acquire>
 80a0c7e:	b150      	cbz	r0, 80a0c96 <_Z16_fetch_usbserialv+0x36>
 80a0c80:	4621      	mov	r1, r4
 80a0c82:	aa01      	add	r2, sp, #4
 80a0c84:	4806      	ldr	r0, [pc, #24]	; (80a0ca0 <_Z16_fetch_usbserialv+0x40>)
 80a0c86:	f7ff ffbd 	bl	80a0c04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0c8a:	4628      	mov	r0, r5
 80a0c8c:	f7ff fa0c 	bl	80a00a8 <__cxa_guard_release>
 80a0c90:	4804      	ldr	r0, [pc, #16]	; (80a0ca4 <_Z16_fetch_usbserialv+0x44>)
 80a0c92:	f000 fc0d 	bl	80a14b0 <atexit>
	return _usbserial;
}
 80a0c96:	4802      	ldr	r0, [pc, #8]	; (80a0ca0 <_Z16_fetch_usbserialv+0x40>)
 80a0c98:	b007      	add	sp, #28
 80a0c9a:	bd30      	pop	{r4, r5, pc}
 80a0c9c:	20000120 	.word	0x20000120
 80a0ca0:	20000128 	.word	0x20000128
 80a0ca4:	080a0b8d 	.word	0x080a0b8d

080a0ca8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0ca8:	b510      	push	{r4, lr}
 80a0caa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0cac:	2214      	movs	r2, #20
 80a0cae:	2100      	movs	r1, #0
 80a0cb0:	f000 fd08 	bl	80a16c4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0cb4:	4b05      	ldr	r3, [pc, #20]	; (80a0ccc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0cb6:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a0cb8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0cba:	4b05      	ldr	r3, [pc, #20]	; (80a0cd0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0cbc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0cbe:	f240 1301 	movw	r3, #257	; 0x101
 80a0cc2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0cc4:	2381      	movs	r3, #129	; 0x81
 80a0cc6:	8223      	strh	r3, [r4, #16]
}
 80a0cc8:	bd10      	pop	{r4, pc}
 80a0cca:	bf00      	nop
 80a0ccc:	200002d2 	.word	0x200002d2
 80a0cd0:	200003d3 	.word	0x200003d3

080a0cd4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0cd4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0cd6:	4c0e      	ldr	r4, [pc, #56]	; (80a0d10 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a0cd8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0cda:	a801      	add	r0, sp, #4
 80a0cdc:	f7ff ffe4 	bl	80a0ca8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0ce0:	7823      	ldrb	r3, [r4, #0]
 80a0ce2:	f3bf 8f5b 	dmb	ish
 80a0ce6:	07db      	lsls	r3, r3, #31
 80a0ce8:	d40e      	bmi.n	80a0d08 <_Z17_fetch_usbserial1v+0x34>
 80a0cea:	4620      	mov	r0, r4
 80a0cec:	f7ff f9d7 	bl	80a009e <__cxa_guard_acquire>
 80a0cf0:	b150      	cbz	r0, 80a0d08 <_Z17_fetch_usbserial1v+0x34>
 80a0cf2:	2101      	movs	r1, #1
 80a0cf4:	aa01      	add	r2, sp, #4
 80a0cf6:	4807      	ldr	r0, [pc, #28]	; (80a0d14 <_Z17_fetch_usbserial1v+0x40>)
 80a0cf8:	f7ff ff84 	bl	80a0c04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0cfc:	4620      	mov	r0, r4
 80a0cfe:	f7ff f9d3 	bl	80a00a8 <__cxa_guard_release>
 80a0d02:	4805      	ldr	r0, [pc, #20]	; (80a0d18 <_Z17_fetch_usbserial1v+0x44>)
 80a0d04:	f000 fbd4 	bl	80a14b0 <atexit>
  return _usbserial1;
}
 80a0d08:	4802      	ldr	r0, [pc, #8]	; (80a0d14 <_Z17_fetch_usbserial1v+0x40>)
 80a0d0a:	b006      	add	sp, #24
 80a0d0c:	bd10      	pop	{r4, pc}
 80a0d0e:	bf00      	nop
 80a0d10:	20000124 	.word	0x20000124
 80a0d14:	2000013c 	.word	0x2000013c
 80a0d18:	080a0c03 	.word	0x080a0c03

080a0d1c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a0d1c:	4770      	bx	lr

080a0d1e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0d1e:	7441      	strb	r1, [r0, #17]
}
 80a0d20:	4770      	bx	lr

080a0d22 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0d22:	4770      	bx	lr

080a0d24 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a0d24:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a0d26:	7c00      	ldrb	r0, [r0, #16]
 80a0d28:	f7ff faaa 	bl	80a0280 <hal_usart_available_data_for_write>
}
 80a0d2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0d30:	bd08      	pop	{r3, pc}

080a0d32 <_ZN11USARTSerial9availableEv>:
{
 80a0d32:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a0d34:	7c00      	ldrb	r0, [r0, #16]
 80a0d36:	f7ff fa7b 	bl	80a0230 <hal_usart_available>
}
 80a0d3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0d3e:	bd08      	pop	{r3, pc}

080a0d40 <_ZN11USARTSerial4peekEv>:
{
 80a0d40:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a0d42:	7c00      	ldrb	r0, [r0, #16]
 80a0d44:	f7ff fa84 	bl	80a0250 <hal_usart_peek>
}
 80a0d48:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0d4c:	bd08      	pop	{r3, pc}

080a0d4e <_ZN11USARTSerial4readEv>:
{
 80a0d4e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a0d50:	7c00      	ldrb	r0, [r0, #16]
 80a0d52:	f7ff fa75 	bl	80a0240 <hal_usart_read>
}
 80a0d56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0d5a:	bd08      	pop	{r3, pc}

080a0d5c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a0d5c:	7c00      	ldrb	r0, [r0, #16]
 80a0d5e:	f7ff ba7f 	b.w	80a0260 <hal_usart_flush>

080a0d62 <_ZN11USARTSerial5writeEh>:
{
 80a0d62:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0d64:	7c46      	ldrb	r6, [r0, #17]
{
 80a0d66:	4604      	mov	r4, r0
 80a0d68:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0d6a:	b12e      	cbz	r6, 80a0d78 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a0d6c:	4629      	mov	r1, r5
 80a0d6e:	7c20      	ldrb	r0, [r4, #16]
}
 80a0d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a0d74:	f7ff ba54 	b.w	80a0220 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0d78:	7c00      	ldrb	r0, [r0, #16]
 80a0d7a:	f7ff fa81 	bl	80a0280 <hal_usart_available_data_for_write>
 80a0d7e:	2800      	cmp	r0, #0
 80a0d80:	dcf4      	bgt.n	80a0d6c <_ZN11USARTSerial5writeEh+0xa>
}
 80a0d82:	4630      	mov	r0, r6
 80a0d84:	bd70      	pop	{r4, r5, r6, pc}

080a0d86 <_ZN11USARTSerialD0Ev>:
 80a0d86:	b510      	push	{r4, lr}
 80a0d88:	4604      	mov	r4, r0
 80a0d8a:	2114      	movs	r1, #20
 80a0d8c:	f000 fa02 	bl	80a1194 <_ZdlPvj>
 80a0d90:	4620      	mov	r0, r4
 80a0d92:	bd10      	pop	{r4, pc}

080a0d94 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a0d94:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a0d98:	b510      	push	{r4, lr}
 80a0d9a:	4604      	mov	r4, r0
 80a0d9c:	4608      	mov	r0, r1
 80a0d9e:	4611      	mov	r1, r2
 80a0da0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0da4:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a0da8:	4a04      	ldr	r2, [pc, #16]	; (80a0dbc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a0daa:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a0dac:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a0dae:	2201      	movs	r2, #1
 80a0db0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a0db2:	461a      	mov	r2, r3
 80a0db4:	f7ff fa2c 	bl	80a0210 <hal_usart_init>
}
 80a0db8:	4620      	mov	r0, r4
 80a0dba:	bd10      	pop	{r4, pc}
 80a0dbc:	080a20fc 	.word	0x080a20fc

080a0dc0 <_Z22__fetch_global_Serial1v>:
{
 80a0dc0:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0dc2:	4d0c      	ldr	r5, [pc, #48]	; (80a0df4 <_Z22__fetch_global_Serial1v+0x34>)
 80a0dc4:	7829      	ldrb	r1, [r5, #0]
 80a0dc6:	f3bf 8f5b 	dmb	ish
 80a0dca:	f011 0401 	ands.w	r4, r1, #1
 80a0dce:	d10f      	bne.n	80a0df0 <_Z22__fetch_global_Serial1v+0x30>
 80a0dd0:	4628      	mov	r0, r5
 80a0dd2:	f7ff f964 	bl	80a009e <__cxa_guard_acquire>
 80a0dd6:	b158      	cbz	r0, 80a0df0 <_Z22__fetch_global_Serial1v+0x30>
 80a0dd8:	4621      	mov	r1, r4
 80a0dda:	4b07      	ldr	r3, [pc, #28]	; (80a0df8 <_Z22__fetch_global_Serial1v+0x38>)
 80a0ddc:	4a07      	ldr	r2, [pc, #28]	; (80a0dfc <_Z22__fetch_global_Serial1v+0x3c>)
 80a0dde:	4808      	ldr	r0, [pc, #32]	; (80a0e00 <_Z22__fetch_global_Serial1v+0x40>)
 80a0de0:	f7ff ffd8 	bl	80a0d94 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a0de4:	4628      	mov	r0, r5
 80a0de6:	f7ff f95f 	bl	80a00a8 <__cxa_guard_release>
 80a0dea:	4806      	ldr	r0, [pc, #24]	; (80a0e04 <_Z22__fetch_global_Serial1v+0x44>)
 80a0dec:	f000 fb60 	bl	80a14b0 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0df0:	4803      	ldr	r0, [pc, #12]	; (80a0e00 <_Z22__fetch_global_Serial1v+0x40>)
 80a0df2:	bd38      	pop	{r3, r4, r5, pc}
 80a0df4:	20000454 	.word	0x20000454
 80a0df8:	200004dc 	.word	0x200004dc
 80a0dfc:	20000458 	.word	0x20000458
 80a0e00:	20000560 	.word	0x20000560
 80a0e04:	080a0d23 	.word	0x080a0d23

080a0e08 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a0e08:	4770      	bx	lr

080a0e0a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e0c:	4606      	mov	r6, r0
 80a0e0e:	4615      	mov	r5, r2
 80a0e10:	460c      	mov	r4, r1
 80a0e12:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0e14:	42bc      	cmp	r4, r7
 80a0e16:	d006      	beq.n	80a0e26 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0e18:	6833      	ldr	r3, [r6, #0]
 80a0e1a:	4630      	mov	r0, r6
 80a0e1c:	689b      	ldr	r3, [r3, #8]
 80a0e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0e22:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a0e24:	e7f6      	b.n	80a0e14 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a0e26:	4628      	mov	r0, r5
 80a0e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e2a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a0e2a:	2200      	movs	r2, #0
 80a0e2c:	7c00      	ldrb	r0, [r0, #16]
 80a0e2e:	f7ff ba2f 	b.w	80a0290 <hal_i2c_write>

080a0e32 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a0e32:	2100      	movs	r1, #0
 80a0e34:	7c00      	ldrb	r0, [r0, #16]
 80a0e36:	f7ff ba33 	b.w	80a02a0 <hal_i2c_available>

080a0e3a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a0e3a:	2100      	movs	r1, #0
 80a0e3c:	7c00      	ldrb	r0, [r0, #16]
 80a0e3e:	f7ff ba37 	b.w	80a02b0 <hal_i2c_read>

080a0e42 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0e42:	2100      	movs	r1, #0
 80a0e44:	7c00      	ldrb	r0, [r0, #16]
 80a0e46:	f7ff ba3b 	b.w	80a02c0 <hal_i2c_peek>

080a0e4a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0e4a:	2100      	movs	r1, #0
 80a0e4c:	7c00      	ldrb	r0, [r0, #16]
 80a0e4e:	f7ff ba3f 	b.w	80a02d0 <hal_i2c_flush>

080a0e52 <_ZN7TwoWireD0Ev>:
 80a0e52:	b510      	push	{r4, lr}
 80a0e54:	4604      	mov	r4, r0
 80a0e56:	2114      	movs	r1, #20
 80a0e58:	f000 f99c 	bl	80a1194 <_ZdlPvj>
 80a0e5c:	4620      	mov	r0, r4
 80a0e5e:	bd10      	pop	{r4, pc}

080a0e60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0e60:	b510      	push	{r4, lr}
 80a0e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0e66:	4604      	mov	r4, r0
 80a0e68:	4608      	mov	r0, r1
 80a0e6a:	2100      	movs	r1, #0
 80a0e6c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0e70:	4b03      	ldr	r3, [pc, #12]	; (80a0e80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a0e72:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0e74:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a0e76:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0e78:	f7ff fa3a 	bl	80a02f0 <hal_i2c_init>
}
 80a0e7c:	4620      	mov	r0, r4
 80a0e7e:	bd10      	pop	{r4, pc}
 80a0e80:	080a212c 	.word	0x080a212c

080a0e84 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a0e84:	2200      	movs	r2, #0
 80a0e86:	6840      	ldr	r0, [r0, #4]
 80a0e88:	4611      	mov	r1, r2
 80a0e8a:	f7ff bb07 	b.w	80a049c <network_ready>

080a0e8e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0e90:	4615      	mov	r5, r2
 80a0e92:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0e94:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a0e96:	460e      	mov	r6, r1
 80a0e98:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a0e9a:	2100      	movs	r1, #0
 80a0e9c:	a803      	add	r0, sp, #12
 80a0e9e:	f000 fc11 	bl	80a16c4 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0ea2:	4628      	mov	r0, r5
 80a0ea4:	f000 fc4c 	bl	80a1740 <strlen>
 80a0ea8:	2700      	movs	r7, #0
 80a0eaa:	b281      	uxth	r1, r0
 80a0eac:	6873      	ldr	r3, [r6, #4]
 80a0eae:	4628      	mov	r0, r5
 80a0eb0:	9700      	str	r7, [sp, #0]
 80a0eb2:	aa03      	add	r2, sp, #12
 80a0eb4:	f7ff fa6e 	bl	80a0394 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0eb8:	b130      	cbz	r0, 80a0ec8 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a0eba:	4639      	mov	r1, r7
 80a0ebc:	4620      	mov	r0, r4
 80a0ebe:	f7ff fe41 	bl	80a0b44 <_ZN9IPAddressC1Em>
    }
 80a0ec2:	4620      	mov	r0, r4
 80a0ec4:	b009      	add	sp, #36	; 0x24
 80a0ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0ec8:	4620      	mov	r0, r4
 80a0eca:	a903      	add	r1, sp, #12
 80a0ecc:	f7ff fe28 	bl	80a0b20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0ed0:	e7f7      	b.n	80a0ec2 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a0ed2 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a0ed2:	2200      	movs	r2, #0
 80a0ed4:	6840      	ldr	r0, [r0, #4]
 80a0ed6:	4611      	mov	r1, r2
 80a0ed8:	f7ff bb00 	b.w	80a04dc <network_listening>

080a0edc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a0edc:	2200      	movs	r2, #0
 80a0ede:	6840      	ldr	r0, [r0, #4]
 80a0ee0:	4611      	mov	r1, r2
 80a0ee2:	f7ff bb0b 	b.w	80a04fc <network_get_listen_timeout>

080a0ee6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a0ee6:	2200      	movs	r2, #0
 80a0ee8:	6840      	ldr	r0, [r0, #4]
 80a0eea:	f7ff baff 	b.w	80a04ec <network_set_listen_timeout>

080a0eee <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0eee:	2200      	movs	r2, #0
 80a0ef0:	6840      	ldr	r0, [r0, #4]
 80a0ef2:	f081 0101 	eor.w	r1, r1, #1
 80a0ef6:	f7ff bae9 	b.w	80a04cc <network_listen>

080a0efa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a0efa:	2300      	movs	r3, #0
 80a0efc:	6840      	ldr	r0, [r0, #4]
 80a0efe:	461a      	mov	r2, r3
 80a0f00:	4619      	mov	r1, r3
 80a0f02:	f7ff badb 	b.w	80a04bc <network_off>

080a0f06 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a0f06:	2200      	movs	r2, #0
 80a0f08:	6840      	ldr	r0, [r0, #4]
 80a0f0a:	4611      	mov	r1, r2
 80a0f0c:	f7ff bab6 	b.w	80a047c <network_connecting>

080a0f10 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0f10:	2200      	movs	r2, #0
 80a0f12:	2102      	movs	r1, #2
 80a0f14:	6840      	ldr	r0, [r0, #4]
 80a0f16:	f7ff bab9 	b.w	80a048c <network_disconnect>

080a0f1a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a0f1a:	2300      	movs	r3, #0
 80a0f1c:	6840      	ldr	r0, [r0, #4]
 80a0f1e:	461a      	mov	r2, r3
 80a0f20:	f7ff baa4 	b.w	80a046c <network_connect>

080a0f24 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0f24:	2204      	movs	r2, #4
 80a0f26:	4b02      	ldr	r3, [pc, #8]	; (80a0f30 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0f28:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0f2a:	4a02      	ldr	r2, [pc, #8]	; (80a0f34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0f2c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a0f2e:	4770      	bx	lr
 80a0f30:	20000574 	.word	0x20000574
 80a0f34:	080a2154 	.word	0x080a2154

080a0f38 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0f38:	2300      	movs	r3, #0
 80a0f3a:	6840      	ldr	r0, [r0, #4]
 80a0f3c:	461a      	mov	r2, r3
 80a0f3e:	f7ff ba95 	b.w	80a046c <network_connect>

080a0f42 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0f42:	2200      	movs	r2, #0
 80a0f44:	2102      	movs	r1, #2
 80a0f46:	6840      	ldr	r0, [r0, #4]
 80a0f48:	f7ff baa0 	b.w	80a048c <network_disconnect>

080a0f4c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0f4c:	2200      	movs	r2, #0
 80a0f4e:	6840      	ldr	r0, [r0, #4]
 80a0f50:	4611      	mov	r1, r2
 80a0f52:	f7ff ba93 	b.w	80a047c <network_connecting>

080a0f56 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0f56:	2200      	movs	r2, #0
 80a0f58:	6840      	ldr	r0, [r0, #4]
 80a0f5a:	4611      	mov	r1, r2
 80a0f5c:	f7ff ba9e 	b.w	80a049c <network_ready>

080a0f60 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0f60:	2300      	movs	r3, #0
 80a0f62:	6840      	ldr	r0, [r0, #4]
 80a0f64:	461a      	mov	r2, r3
 80a0f66:	4619      	mov	r1, r3
 80a0f68:	f7ff baa0 	b.w	80a04ac <network_on>

080a0f6c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0f6c:	2300      	movs	r3, #0
 80a0f6e:	6840      	ldr	r0, [r0, #4]
 80a0f70:	461a      	mov	r2, r3
 80a0f72:	4619      	mov	r1, r3
 80a0f74:	f7ff baa2 	b.w	80a04bc <network_off>

080a0f78 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a0f78:	2100      	movs	r1, #0
 80a0f7a:	6840      	ldr	r0, [r0, #4]
 80a0f7c:	f7ff bac6 	b.w	80a050c <network_is_on>

080a0f80 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a0f80:	2100      	movs	r1, #0
 80a0f82:	6840      	ldr	r0, [r0, #4]
 80a0f84:	f7ff baca 	b.w	80a051c <network_is_off>

080a0f88 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0f88:	2200      	movs	r2, #0
 80a0f8a:	6840      	ldr	r0, [r0, #4]
 80a0f8c:	f081 0101 	eor.w	r1, r1, #1
 80a0f90:	f7ff ba9c 	b.w	80a04cc <network_listen>

080a0f94 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0f94:	2200      	movs	r2, #0
 80a0f96:	6840      	ldr	r0, [r0, #4]
 80a0f98:	f7ff baa8 	b.w	80a04ec <network_set_listen_timeout>

080a0f9c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0f9c:	2200      	movs	r2, #0
 80a0f9e:	6840      	ldr	r0, [r0, #4]
 80a0fa0:	4611      	mov	r1, r2
 80a0fa2:	f7ff baab 	b.w	80a04fc <network_get_listen_timeout>

080a0fa6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0fa6:	2200      	movs	r2, #0
 80a0fa8:	6840      	ldr	r0, [r0, #4]
 80a0faa:	4611      	mov	r1, r2
 80a0fac:	f7ff ba96 	b.w	80a04dc <network_listening>

080a0fb0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0fb0:	b570      	push	{r4, r5, r6, lr}
 80a0fb2:	4615      	mov	r5, r2
 80a0fb4:	b08e      	sub	sp, #56	; 0x38
 80a0fb6:	4604      	mov	r4, r0
    IPAddress addr;
 80a0fb8:	a808      	add	r0, sp, #32
 80a0fba:	f7ff fda3 	bl	80a0b04 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a0fbe:	2211      	movs	r2, #17
 80a0fc0:	2100      	movs	r1, #0
 80a0fc2:	a803      	add	r0, sp, #12
 80a0fc4:	f000 fb7e 	bl	80a16c4 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0fc8:	2600      	movs	r6, #0
 80a0fca:	4628      	mov	r0, r5
 80a0fcc:	f000 fbb8 	bl	80a1740 <strlen>
 80a0fd0:	4b0a      	ldr	r3, [pc, #40]	; (80a0ffc <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0fd2:	9600      	str	r6, [sp, #0]
 80a0fd4:	b281      	uxth	r1, r0
 80a0fd6:	685b      	ldr	r3, [r3, #4]
 80a0fd8:	4628      	mov	r0, r5
 80a0fda:	aa03      	add	r2, sp, #12
 80a0fdc:	f7ff f9da 	bl	80a0394 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0fe0:	b130      	cbz	r0, 80a0ff0 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a0fe2:	4631      	mov	r1, r6
 80a0fe4:	4620      	mov	r0, r4
 80a0fe6:	f7ff fdad 	bl	80a0b44 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0fea:	4620      	mov	r0, r4
 80a0fec:	b00e      	add	sp, #56	; 0x38
 80a0fee:	bd70      	pop	{r4, r5, r6, pc}
 80a0ff0:	4620      	mov	r0, r4
 80a0ff2:	a903      	add	r1, sp, #12
 80a0ff4:	f7ff fd94 	bl	80a0b20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a0ff8:	e7f7      	b.n	80a0fea <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a0ffa:	bf00      	nop
 80a0ffc:	20000574 	.word	0x20000574

080a1000 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1000:	4b02      	ldr	r3, [pc, #8]	; (80a100c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1002:	4a03      	ldr	r2, [pc, #12]	; (80a1010 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1004:	601a      	str	r2, [r3, #0]
 80a1006:	2200      	movs	r2, #0
 80a1008:	605a      	str	r2, [r3, #4]

} // spark
 80a100a:	4770      	bx	lr
 80a100c:	2000057c 	.word	0x2000057c
 80a1010:	080a2190 	.word	0x080a2190

080a1014 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1014:	4b02      	ldr	r3, [pc, #8]	; (80a1020 <__tcf_0+0xc>)
 80a1016:	6898      	ldr	r0, [r3, #8]
 80a1018:	b108      	cbz	r0, 80a101e <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a101a:	f7ff b8f1 	b.w	80a0200 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a101e:	4770      	bx	lr
 80a1020:	20000588 	.word	0x20000588

080a1024 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a1024:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a1026:	b570      	push	{r4, r5, r6, lr}
 80a1028:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a102a:	d901      	bls.n	80a1030 <pinAvailable+0xc>
    return false;
 80a102c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a102e:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1030:	f1a0 030d 	sub.w	r3, r0, #13
 80a1034:	2b02      	cmp	r3, #2
 80a1036:	d90b      	bls.n	80a1050 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a1038:	2801      	cmp	r0, #1
 80a103a:	d824      	bhi.n	80a1086 <pinAvailable+0x62>
 80a103c:	f000 f886 	bl	80a114c <_Z19__fetch_global_Wirev>
 80a1040:	2100      	movs	r1, #0
 80a1042:	7c00      	ldrb	r0, [r0, #16]
 80a1044:	f7ff f94c 	bl	80a02e0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1048:	f080 0001 	eor.w	r0, r0, #1
 80a104c:	b2c0      	uxtb	r0, r0
 80a104e:	e7ee      	b.n	80a102e <pinAvailable+0xa>
 80a1050:	4e12      	ldr	r6, [pc, #72]	; (80a109c <pinAvailable+0x78>)
 80a1052:	7831      	ldrb	r1, [r6, #0]
 80a1054:	f3bf 8f5b 	dmb	ish
 80a1058:	f011 0501 	ands.w	r5, r1, #1
 80a105c:	d10d      	bne.n	80a107a <pinAvailable+0x56>
 80a105e:	4630      	mov	r0, r6
 80a1060:	f7ff f81d 	bl	80a009e <__cxa_guard_acquire>
 80a1064:	b148      	cbz	r0, 80a107a <pinAvailable+0x56>
 80a1066:	4629      	mov	r1, r5
 80a1068:	480d      	ldr	r0, [pc, #52]	; (80a10a0 <pinAvailable+0x7c>)
 80a106a:	f7ff fabf 	bl	80a05ec <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a106e:	4630      	mov	r0, r6
 80a1070:	f7ff f81a 	bl	80a00a8 <__cxa_guard_release>
 80a1074:	480b      	ldr	r0, [pc, #44]	; (80a10a4 <pinAvailable+0x80>)
 80a1076:	f000 fa1b 	bl	80a14b0 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a107a:	4b09      	ldr	r3, [pc, #36]	; (80a10a0 <pinAvailable+0x7c>)
 80a107c:	7818      	ldrb	r0, [r3, #0]
 80a107e:	f7ff f949 	bl	80a0314 <hal_spi_is_enabled>
 80a1082:	2800      	cmp	r0, #0
 80a1084:	d1d2      	bne.n	80a102c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1086:	3c12      	subs	r4, #18
 80a1088:	2c01      	cmp	r4, #1
 80a108a:	d805      	bhi.n	80a1098 <pinAvailable+0x74>
 80a108c:	f7ff fe98 	bl	80a0dc0 <_Z22__fetch_global_Serial1v>
 80a1090:	7c00      	ldrb	r0, [r0, #16]
 80a1092:	f7ff f8ed 	bl	80a0270 <hal_usart_is_enabled>
 80a1096:	e7d7      	b.n	80a1048 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a1098:	2001      	movs	r0, #1
 80a109a:	e7c8      	b.n	80a102e <pinAvailable+0xa>
 80a109c:	20000584 	.word	0x20000584
 80a10a0:	20000588 	.word	0x20000588
 80a10a4:	080a1015 	.word	0x080a1015

080a10a8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a10a8:	2817      	cmp	r0, #23
{
 80a10aa:	b538      	push	{r3, r4, r5, lr}
 80a10ac:	4604      	mov	r4, r0
 80a10ae:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a10b0:	d80a      	bhi.n	80a10c8 <pinMode+0x20>
 80a10b2:	29ff      	cmp	r1, #255	; 0xff
 80a10b4:	d008      	beq.n	80a10c8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a10b6:	f7ff ffb5 	bl	80a1024 <pinAvailable>
 80a10ba:	b128      	cbz	r0, 80a10c8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a10bc:	4629      	mov	r1, r5
 80a10be:	4620      	mov	r0, r4
}
 80a10c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a10c4:	f7ff b85c 	b.w	80a0180 <HAL_Pin_Mode>
}
 80a10c8:	bd38      	pop	{r3, r4, r5, pc}

080a10ca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a10ca:	b538      	push	{r3, r4, r5, lr}
 80a10cc:	4604      	mov	r4, r0
 80a10ce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a10d0:	f7ff f85e 	bl	80a0190 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a10d4:	28ff      	cmp	r0, #255	; 0xff
 80a10d6:	d010      	beq.n	80a10fa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a10d8:	2806      	cmp	r0, #6
 80a10da:	d804      	bhi.n	80a10e6 <digitalWrite+0x1c>
 80a10dc:	234d      	movs	r3, #77	; 0x4d
 80a10de:	fa23 f000 	lsr.w	r0, r3, r0
 80a10e2:	07c3      	lsls	r3, r0, #31
 80a10e4:	d409      	bmi.n	80a10fa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a10e6:	4620      	mov	r0, r4
 80a10e8:	f7ff ff9c 	bl	80a1024 <pinAvailable>
 80a10ec:	b128      	cbz	r0, 80a10fa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a10ee:	4629      	mov	r1, r5
 80a10f0:	4620      	mov	r0, r4
}
 80a10f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a10f6:	f7ff b853 	b.w	80a01a0 <HAL_GPIO_Write>
}
 80a10fa:	bd38      	pop	{r3, r4, r5, pc}

080a10fc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a10fc:	2300      	movs	r3, #0
 80a10fe:	b507      	push	{r0, r1, r2, lr}
 80a1100:	461a      	mov	r2, r3
 80a1102:	4619      	mov	r1, r3
 80a1104:	9300      	str	r3, [sp, #0]
 80a1106:	4803      	ldr	r0, [pc, #12]	; (80a1114 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a1108:	f7ff fd32 	bl	80a0b70 <_ZN9IPAddressC1Ehhhh>
 80a110c:	b003      	add	sp, #12
 80a110e:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1112:	bf00      	nop
 80a1114:	20000598 	.word	0x20000598

080a1118 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1118:	4770      	bx	lr
	...

080a111c <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a111c:	2300      	movs	r3, #0
{
 80a111e:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1120:	2520      	movs	r5, #32
 80a1122:	8043      	strh	r3, [r0, #2]
 80a1124:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1126:	4e08      	ldr	r6, [pc, #32]	; (80a1148 <_Z17acquireWireBufferv+0x2c>)
{
 80a1128:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a112a:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a112c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a112e:	6085      	str	r5, [r0, #8]
 80a1130:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1132:	4628      	mov	r0, r5
 80a1134:	f000 f830 	bl	80a1198 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1138:	4631      	mov	r1, r6
	};
 80a113a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a113c:	4628      	mov	r0, r5
 80a113e:	f000 f82b 	bl	80a1198 <_ZnajRKSt9nothrow_t>
	};
 80a1142:	60e0      	str	r0, [r4, #12]
}
 80a1144:	4620      	mov	r0, r4
 80a1146:	bd70      	pop	{r4, r5, r6, pc}
 80a1148:	080a21c4 	.word	0x080a21c4

080a114c <_Z19__fetch_global_Wirev>:
{
 80a114c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a114e:	4d0e      	ldr	r5, [pc, #56]	; (80a1188 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a1150:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1152:	7829      	ldrb	r1, [r5, #0]
 80a1154:	f3bf 8f5b 	dmb	ish
 80a1158:	f011 0401 	ands.w	r4, r1, #1
 80a115c:	d111      	bne.n	80a1182 <_Z19__fetch_global_Wirev+0x36>
 80a115e:	4628      	mov	r0, r5
 80a1160:	f7fe ff9d 	bl	80a009e <__cxa_guard_acquire>
 80a1164:	b168      	cbz	r0, 80a1182 <_Z19__fetch_global_Wirev+0x36>
 80a1166:	a801      	add	r0, sp, #4
 80a1168:	f7ff ffd8 	bl	80a111c <_Z17acquireWireBufferv>
 80a116c:	4621      	mov	r1, r4
 80a116e:	aa01      	add	r2, sp, #4
 80a1170:	4806      	ldr	r0, [pc, #24]	; (80a118c <_Z19__fetch_global_Wirev+0x40>)
 80a1172:	f7ff fe75 	bl	80a0e60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a1176:	4628      	mov	r0, r5
 80a1178:	f7fe ff96 	bl	80a00a8 <__cxa_guard_release>
 80a117c:	4804      	ldr	r0, [pc, #16]	; (80a1190 <_Z19__fetch_global_Wirev+0x44>)
 80a117e:	f000 f997 	bl	80a14b0 <atexit>
	return wire;
}
 80a1182:	4802      	ldr	r0, [pc, #8]	; (80a118c <_Z19__fetch_global_Wirev+0x40>)
 80a1184:	b007      	add	sp, #28
 80a1186:	bd30      	pop	{r4, r5, pc}
 80a1188:	200005b0 	.word	0x200005b0
 80a118c:	200005b4 	.word	0x200005b4
 80a1190:	080a1119 	.word	0x080a1119

080a1194 <_ZdlPvj>:
 80a1194:	f7fe bf81 	b.w	80a009a <_ZdlPv>

080a1198 <_ZnajRKSt9nothrow_t>:
 80a1198:	f7fe bf7d 	b.w	80a0096 <_Znaj>

080a119c <__udivmoddi4>:
 80a119c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a11a0:	9e08      	ldr	r6, [sp, #32]
 80a11a2:	460d      	mov	r5, r1
 80a11a4:	4604      	mov	r4, r0
 80a11a6:	468e      	mov	lr, r1
 80a11a8:	2b00      	cmp	r3, #0
 80a11aa:	f040 8083 	bne.w	80a12b4 <__udivmoddi4+0x118>
 80a11ae:	428a      	cmp	r2, r1
 80a11b0:	4617      	mov	r7, r2
 80a11b2:	d947      	bls.n	80a1244 <__udivmoddi4+0xa8>
 80a11b4:	fab2 f382 	clz	r3, r2
 80a11b8:	b14b      	cbz	r3, 80a11ce <__udivmoddi4+0x32>
 80a11ba:	f1c3 0120 	rsb	r1, r3, #32
 80a11be:	fa05 fe03 	lsl.w	lr, r5, r3
 80a11c2:	fa20 f101 	lsr.w	r1, r0, r1
 80a11c6:	409f      	lsls	r7, r3
 80a11c8:	ea41 0e0e 	orr.w	lr, r1, lr
 80a11cc:	409c      	lsls	r4, r3
 80a11ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a11d2:	fbbe fcf8 	udiv	ip, lr, r8
 80a11d6:	fa1f f987 	uxth.w	r9, r7
 80a11da:	fb08 e21c 	mls	r2, r8, ip, lr
 80a11de:	fb0c f009 	mul.w	r0, ip, r9
 80a11e2:	0c21      	lsrs	r1, r4, #16
 80a11e4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a11e8:	4290      	cmp	r0, r2
 80a11ea:	d90a      	bls.n	80a1202 <__udivmoddi4+0x66>
 80a11ec:	18ba      	adds	r2, r7, r2
 80a11ee:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a11f2:	f080 8118 	bcs.w	80a1426 <__udivmoddi4+0x28a>
 80a11f6:	4290      	cmp	r0, r2
 80a11f8:	f240 8115 	bls.w	80a1426 <__udivmoddi4+0x28a>
 80a11fc:	f1ac 0c02 	sub.w	ip, ip, #2
 80a1200:	443a      	add	r2, r7
 80a1202:	1a12      	subs	r2, r2, r0
 80a1204:	fbb2 f0f8 	udiv	r0, r2, r8
 80a1208:	fb08 2210 	mls	r2, r8, r0, r2
 80a120c:	fb00 f109 	mul.w	r1, r0, r9
 80a1210:	b2a4      	uxth	r4, r4
 80a1212:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1216:	42a1      	cmp	r1, r4
 80a1218:	d909      	bls.n	80a122e <__udivmoddi4+0x92>
 80a121a:	193c      	adds	r4, r7, r4
 80a121c:	f100 32ff 	add.w	r2, r0, #4294967295
 80a1220:	f080 8103 	bcs.w	80a142a <__udivmoddi4+0x28e>
 80a1224:	42a1      	cmp	r1, r4
 80a1226:	f240 8100 	bls.w	80a142a <__udivmoddi4+0x28e>
 80a122a:	3802      	subs	r0, #2
 80a122c:	443c      	add	r4, r7
 80a122e:	1a64      	subs	r4, r4, r1
 80a1230:	2100      	movs	r1, #0
 80a1232:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a1236:	b11e      	cbz	r6, 80a1240 <__udivmoddi4+0xa4>
 80a1238:	2200      	movs	r2, #0
 80a123a:	40dc      	lsrs	r4, r3
 80a123c:	e9c6 4200 	strd	r4, r2, [r6]
 80a1240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1244:	b902      	cbnz	r2, 80a1248 <__udivmoddi4+0xac>
 80a1246:	deff      	udf	#255	; 0xff
 80a1248:	fab2 f382 	clz	r3, r2
 80a124c:	2b00      	cmp	r3, #0
 80a124e:	d14f      	bne.n	80a12f0 <__udivmoddi4+0x154>
 80a1250:	1a8d      	subs	r5, r1, r2
 80a1252:	2101      	movs	r1, #1
 80a1254:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a1258:	fa1f f882 	uxth.w	r8, r2
 80a125c:	fbb5 fcfe 	udiv	ip, r5, lr
 80a1260:	fb0e 551c 	mls	r5, lr, ip, r5
 80a1264:	fb08 f00c 	mul.w	r0, r8, ip
 80a1268:	0c22      	lsrs	r2, r4, #16
 80a126a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a126e:	42a8      	cmp	r0, r5
 80a1270:	d907      	bls.n	80a1282 <__udivmoddi4+0xe6>
 80a1272:	197d      	adds	r5, r7, r5
 80a1274:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a1278:	d202      	bcs.n	80a1280 <__udivmoddi4+0xe4>
 80a127a:	42a8      	cmp	r0, r5
 80a127c:	f200 80e9 	bhi.w	80a1452 <__udivmoddi4+0x2b6>
 80a1280:	4694      	mov	ip, r2
 80a1282:	1a2d      	subs	r5, r5, r0
 80a1284:	fbb5 f0fe 	udiv	r0, r5, lr
 80a1288:	fb0e 5510 	mls	r5, lr, r0, r5
 80a128c:	fb08 f800 	mul.w	r8, r8, r0
 80a1290:	b2a4      	uxth	r4, r4
 80a1292:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a1296:	45a0      	cmp	r8, r4
 80a1298:	d907      	bls.n	80a12aa <__udivmoddi4+0x10e>
 80a129a:	193c      	adds	r4, r7, r4
 80a129c:	f100 32ff 	add.w	r2, r0, #4294967295
 80a12a0:	d202      	bcs.n	80a12a8 <__udivmoddi4+0x10c>
 80a12a2:	45a0      	cmp	r8, r4
 80a12a4:	f200 80d9 	bhi.w	80a145a <__udivmoddi4+0x2be>
 80a12a8:	4610      	mov	r0, r2
 80a12aa:	eba4 0408 	sub.w	r4, r4, r8
 80a12ae:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a12b2:	e7c0      	b.n	80a1236 <__udivmoddi4+0x9a>
 80a12b4:	428b      	cmp	r3, r1
 80a12b6:	d908      	bls.n	80a12ca <__udivmoddi4+0x12e>
 80a12b8:	2e00      	cmp	r6, #0
 80a12ba:	f000 80b1 	beq.w	80a1420 <__udivmoddi4+0x284>
 80a12be:	2100      	movs	r1, #0
 80a12c0:	e9c6 0500 	strd	r0, r5, [r6]
 80a12c4:	4608      	mov	r0, r1
 80a12c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a12ca:	fab3 f183 	clz	r1, r3
 80a12ce:	2900      	cmp	r1, #0
 80a12d0:	d14b      	bne.n	80a136a <__udivmoddi4+0x1ce>
 80a12d2:	42ab      	cmp	r3, r5
 80a12d4:	d302      	bcc.n	80a12dc <__udivmoddi4+0x140>
 80a12d6:	4282      	cmp	r2, r0
 80a12d8:	f200 80b9 	bhi.w	80a144e <__udivmoddi4+0x2b2>
 80a12dc:	1a84      	subs	r4, r0, r2
 80a12de:	eb65 0303 	sbc.w	r3, r5, r3
 80a12e2:	2001      	movs	r0, #1
 80a12e4:	469e      	mov	lr, r3
 80a12e6:	2e00      	cmp	r6, #0
 80a12e8:	d0aa      	beq.n	80a1240 <__udivmoddi4+0xa4>
 80a12ea:	e9c6 4e00 	strd	r4, lr, [r6]
 80a12ee:	e7a7      	b.n	80a1240 <__udivmoddi4+0xa4>
 80a12f0:	409f      	lsls	r7, r3
 80a12f2:	f1c3 0220 	rsb	r2, r3, #32
 80a12f6:	40d1      	lsrs	r1, r2
 80a12f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a12fc:	fbb1 f0fe 	udiv	r0, r1, lr
 80a1300:	fa1f f887 	uxth.w	r8, r7
 80a1304:	fb0e 1110 	mls	r1, lr, r0, r1
 80a1308:	fa24 f202 	lsr.w	r2, r4, r2
 80a130c:	409d      	lsls	r5, r3
 80a130e:	fb00 fc08 	mul.w	ip, r0, r8
 80a1312:	432a      	orrs	r2, r5
 80a1314:	0c15      	lsrs	r5, r2, #16
 80a1316:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a131a:	45ac      	cmp	ip, r5
 80a131c:	fa04 f403 	lsl.w	r4, r4, r3
 80a1320:	d909      	bls.n	80a1336 <__udivmoddi4+0x19a>
 80a1322:	197d      	adds	r5, r7, r5
 80a1324:	f100 31ff 	add.w	r1, r0, #4294967295
 80a1328:	f080 808f 	bcs.w	80a144a <__udivmoddi4+0x2ae>
 80a132c:	45ac      	cmp	ip, r5
 80a132e:	f240 808c 	bls.w	80a144a <__udivmoddi4+0x2ae>
 80a1332:	3802      	subs	r0, #2
 80a1334:	443d      	add	r5, r7
 80a1336:	eba5 050c 	sub.w	r5, r5, ip
 80a133a:	fbb5 f1fe 	udiv	r1, r5, lr
 80a133e:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a1342:	fb01 f908 	mul.w	r9, r1, r8
 80a1346:	b295      	uxth	r5, r2
 80a1348:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a134c:	45a9      	cmp	r9, r5
 80a134e:	d907      	bls.n	80a1360 <__udivmoddi4+0x1c4>
 80a1350:	197d      	adds	r5, r7, r5
 80a1352:	f101 32ff 	add.w	r2, r1, #4294967295
 80a1356:	d274      	bcs.n	80a1442 <__udivmoddi4+0x2a6>
 80a1358:	45a9      	cmp	r9, r5
 80a135a:	d972      	bls.n	80a1442 <__udivmoddi4+0x2a6>
 80a135c:	3902      	subs	r1, #2
 80a135e:	443d      	add	r5, r7
 80a1360:	eba5 0509 	sub.w	r5, r5, r9
 80a1364:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a1368:	e778      	b.n	80a125c <__udivmoddi4+0xc0>
 80a136a:	f1c1 0720 	rsb	r7, r1, #32
 80a136e:	408b      	lsls	r3, r1
 80a1370:	fa22 fc07 	lsr.w	ip, r2, r7
 80a1374:	ea4c 0c03 	orr.w	ip, ip, r3
 80a1378:	fa25 f407 	lsr.w	r4, r5, r7
 80a137c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a1380:	fbb4 f9fe 	udiv	r9, r4, lr
 80a1384:	fa1f f88c 	uxth.w	r8, ip
 80a1388:	fb0e 4419 	mls	r4, lr, r9, r4
 80a138c:	fa20 f307 	lsr.w	r3, r0, r7
 80a1390:	fb09 fa08 	mul.w	sl, r9, r8
 80a1394:	408d      	lsls	r5, r1
 80a1396:	431d      	orrs	r5, r3
 80a1398:	0c2b      	lsrs	r3, r5, #16
 80a139a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a139e:	45a2      	cmp	sl, r4
 80a13a0:	fa02 f201 	lsl.w	r2, r2, r1
 80a13a4:	fa00 f301 	lsl.w	r3, r0, r1
 80a13a8:	d909      	bls.n	80a13be <__udivmoddi4+0x222>
 80a13aa:	eb1c 0404 	adds.w	r4, ip, r4
 80a13ae:	f109 30ff 	add.w	r0, r9, #4294967295
 80a13b2:	d248      	bcs.n	80a1446 <__udivmoddi4+0x2aa>
 80a13b4:	45a2      	cmp	sl, r4
 80a13b6:	d946      	bls.n	80a1446 <__udivmoddi4+0x2aa>
 80a13b8:	f1a9 0902 	sub.w	r9, r9, #2
 80a13bc:	4464      	add	r4, ip
 80a13be:	eba4 040a 	sub.w	r4, r4, sl
 80a13c2:	fbb4 f0fe 	udiv	r0, r4, lr
 80a13c6:	fb0e 4410 	mls	r4, lr, r0, r4
 80a13ca:	fb00 fa08 	mul.w	sl, r0, r8
 80a13ce:	b2ad      	uxth	r5, r5
 80a13d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a13d4:	45a2      	cmp	sl, r4
 80a13d6:	d908      	bls.n	80a13ea <__udivmoddi4+0x24e>
 80a13d8:	eb1c 0404 	adds.w	r4, ip, r4
 80a13dc:	f100 35ff 	add.w	r5, r0, #4294967295
 80a13e0:	d22d      	bcs.n	80a143e <__udivmoddi4+0x2a2>
 80a13e2:	45a2      	cmp	sl, r4
 80a13e4:	d92b      	bls.n	80a143e <__udivmoddi4+0x2a2>
 80a13e6:	3802      	subs	r0, #2
 80a13e8:	4464      	add	r4, ip
 80a13ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a13ee:	fba0 8902 	umull	r8, r9, r0, r2
 80a13f2:	eba4 040a 	sub.w	r4, r4, sl
 80a13f6:	454c      	cmp	r4, r9
 80a13f8:	46c6      	mov	lr, r8
 80a13fa:	464d      	mov	r5, r9
 80a13fc:	d319      	bcc.n	80a1432 <__udivmoddi4+0x296>
 80a13fe:	d016      	beq.n	80a142e <__udivmoddi4+0x292>
 80a1400:	b15e      	cbz	r6, 80a141a <__udivmoddi4+0x27e>
 80a1402:	ebb3 020e 	subs.w	r2, r3, lr
 80a1406:	eb64 0405 	sbc.w	r4, r4, r5
 80a140a:	fa04 f707 	lsl.w	r7, r4, r7
 80a140e:	fa22 f301 	lsr.w	r3, r2, r1
 80a1412:	431f      	orrs	r7, r3
 80a1414:	40cc      	lsrs	r4, r1
 80a1416:	e9c6 7400 	strd	r7, r4, [r6]
 80a141a:	2100      	movs	r1, #0
 80a141c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1420:	4631      	mov	r1, r6
 80a1422:	4630      	mov	r0, r6
 80a1424:	e70c      	b.n	80a1240 <__udivmoddi4+0xa4>
 80a1426:	468c      	mov	ip, r1
 80a1428:	e6eb      	b.n	80a1202 <__udivmoddi4+0x66>
 80a142a:	4610      	mov	r0, r2
 80a142c:	e6ff      	b.n	80a122e <__udivmoddi4+0x92>
 80a142e:	4543      	cmp	r3, r8
 80a1430:	d2e6      	bcs.n	80a1400 <__udivmoddi4+0x264>
 80a1432:	ebb8 0e02 	subs.w	lr, r8, r2
 80a1436:	eb69 050c 	sbc.w	r5, r9, ip
 80a143a:	3801      	subs	r0, #1
 80a143c:	e7e0      	b.n	80a1400 <__udivmoddi4+0x264>
 80a143e:	4628      	mov	r0, r5
 80a1440:	e7d3      	b.n	80a13ea <__udivmoddi4+0x24e>
 80a1442:	4611      	mov	r1, r2
 80a1444:	e78c      	b.n	80a1360 <__udivmoddi4+0x1c4>
 80a1446:	4681      	mov	r9, r0
 80a1448:	e7b9      	b.n	80a13be <__udivmoddi4+0x222>
 80a144a:	4608      	mov	r0, r1
 80a144c:	e773      	b.n	80a1336 <__udivmoddi4+0x19a>
 80a144e:	4608      	mov	r0, r1
 80a1450:	e749      	b.n	80a12e6 <__udivmoddi4+0x14a>
 80a1452:	f1ac 0c02 	sub.w	ip, ip, #2
 80a1456:	443d      	add	r5, r7
 80a1458:	e713      	b.n	80a1282 <__udivmoddi4+0xe6>
 80a145a:	3802      	subs	r0, #2
 80a145c:	443c      	add	r4, r7
 80a145e:	e724      	b.n	80a12aa <__udivmoddi4+0x10e>

080a1460 <__aeabi_idiv0>:
 80a1460:	4770      	bx	lr
 80a1462:	bf00      	nop

080a1464 <asctime_r>:
 80a1464:	b510      	push	{r4, lr}
 80a1466:	460c      	mov	r4, r1
 80a1468:	6941      	ldr	r1, [r0, #20]
 80a146a:	b086      	sub	sp, #24
 80a146c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a1470:	6903      	ldr	r3, [r0, #16]
 80a1472:	6982      	ldr	r2, [r0, #24]
 80a1474:	9104      	str	r1, [sp, #16]
 80a1476:	6801      	ldr	r1, [r0, #0]
 80a1478:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a147c:	9103      	str	r1, [sp, #12]
 80a147e:	6841      	ldr	r1, [r0, #4]
 80a1480:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a1484:	9102      	str	r1, [sp, #8]
 80a1486:	6881      	ldr	r1, [r0, #8]
 80a1488:	9101      	str	r1, [sp, #4]
 80a148a:	68c1      	ldr	r1, [r0, #12]
 80a148c:	4620      	mov	r0, r4
 80a148e:	9100      	str	r1, [sp, #0]
 80a1490:	4904      	ldr	r1, [pc, #16]	; (80a14a4 <asctime_r+0x40>)
 80a1492:	440b      	add	r3, r1
 80a1494:	4904      	ldr	r1, [pc, #16]	; (80a14a8 <asctime_r+0x44>)
 80a1496:	440a      	add	r2, r1
 80a1498:	4904      	ldr	r1, [pc, #16]	; (80a14ac <asctime_r+0x48>)
 80a149a:	f7ff f87f 	bl	80a059c <siprintf>
 80a149e:	4620      	mov	r0, r4
 80a14a0:	b006      	add	sp, #24
 80a14a2:	bd10      	pop	{r4, pc}
 80a14a4:	080a21fa 	.word	0x080a21fa
 80a14a8:	080a21e5 	.word	0x080a21e5
 80a14ac:	080a21c5 	.word	0x080a21c5

080a14b0 <atexit>:
 80a14b0:	2300      	movs	r3, #0
 80a14b2:	4601      	mov	r1, r0
 80a14b4:	461a      	mov	r2, r3
 80a14b6:	4618      	mov	r0, r3
 80a14b8:	f000 bc1c 	b.w	80a1cf4 <__register_exitproc>

080a14bc <localtime_r>:
 80a14bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a14c0:	460c      	mov	r4, r1
 80a14c2:	4607      	mov	r7, r0
 80a14c4:	f000 fcbc 	bl	80a1e40 <__gettzinfo>
 80a14c8:	4621      	mov	r1, r4
 80a14ca:	4680      	mov	r8, r0
 80a14cc:	4638      	mov	r0, r7
 80a14ce:	f000 fcbb 	bl	80a1e48 <gmtime_r>
 80a14d2:	6943      	ldr	r3, [r0, #20]
 80a14d4:	4604      	mov	r4, r0
 80a14d6:	079a      	lsls	r2, r3, #30
 80a14d8:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80a14dc:	d105      	bne.n	80a14ea <localtime_r+0x2e>
 80a14de:	2264      	movs	r2, #100	; 0x64
 80a14e0:	fb96 f3f2 	sdiv	r3, r6, r2
 80a14e4:	fb02 6313 	mls	r3, r2, r3, r6
 80a14e8:	bb7b      	cbnz	r3, 80a154a <localtime_r+0x8e>
 80a14ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a14ee:	fb96 f5f3 	sdiv	r5, r6, r3
 80a14f2:	fb03 6515 	mls	r5, r3, r5, r6
 80a14f6:	fab5 f585 	clz	r5, r5
 80a14fa:	096d      	lsrs	r5, r5, #5
 80a14fc:	2230      	movs	r2, #48	; 0x30
 80a14fe:	4b68      	ldr	r3, [pc, #416]	; (80a16a0 <localtime_r+0x1e4>)
 80a1500:	fb02 3505 	mla	r5, r2, r5, r3
 80a1504:	f000 fa64 	bl	80a19d0 <__tz_lock>
 80a1508:	f000 fa6e 	bl	80a19e8 <_tzset_unlocked>
 80a150c:	4b65      	ldr	r3, [pc, #404]	; (80a16a4 <localtime_r+0x1e8>)
 80a150e:	681b      	ldr	r3, [r3, #0]
 80a1510:	b353      	cbz	r3, 80a1568 <localtime_r+0xac>
 80a1512:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a1516:	42b3      	cmp	r3, r6
 80a1518:	d119      	bne.n	80a154e <localtime_r+0x92>
 80a151a:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a151e:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80a1522:	f8d8 1000 	ldr.w	r1, [r8]
 80a1526:	b9d1      	cbnz	r1, 80a155e <localtime_r+0xa2>
 80a1528:	4296      	cmp	r6, r2
 80a152a:	eb77 0303 	sbcs.w	r3, r7, r3
 80a152e:	da23      	bge.n	80a1578 <localtime_r+0xbc>
 80a1530:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a1534:	4296      	cmp	r6, r2
 80a1536:	eb77 0303 	sbcs.w	r3, r7, r3
 80a153a:	bfb4      	ite	lt
 80a153c:	2301      	movlt	r3, #1
 80a153e:	2300      	movge	r3, #0
 80a1540:	6223      	str	r3, [r4, #32]
 80a1542:	db1b      	blt.n	80a157c <localtime_r+0xc0>
 80a1544:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80a1548:	e01a      	b.n	80a1580 <localtime_r+0xc4>
 80a154a:	2501      	movs	r5, #1
 80a154c:	e7d6      	b.n	80a14fc <localtime_r+0x40>
 80a154e:	4630      	mov	r0, r6
 80a1550:	f000 f996 	bl	80a1880 <__tzcalc_limits>
 80a1554:	2800      	cmp	r0, #0
 80a1556:	d1e0      	bne.n	80a151a <localtime_r+0x5e>
 80a1558:	f04f 33ff 	mov.w	r3, #4294967295
 80a155c:	e004      	b.n	80a1568 <localtime_r+0xac>
 80a155e:	4296      	cmp	r6, r2
 80a1560:	eb77 0303 	sbcs.w	r3, r7, r3
 80a1564:	da02      	bge.n	80a156c <localtime_r+0xb0>
 80a1566:	2300      	movs	r3, #0
 80a1568:	6223      	str	r3, [r4, #32]
 80a156a:	e7eb      	b.n	80a1544 <localtime_r+0x88>
 80a156c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a1570:	4296      	cmp	r6, r2
 80a1572:	eb77 0303 	sbcs.w	r3, r7, r3
 80a1576:	daf6      	bge.n	80a1566 <localtime_r+0xaa>
 80a1578:	2301      	movs	r3, #1
 80a157a:	6223      	str	r3, [r4, #32]
 80a157c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80a1580:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a1584:	fb91 f6f3 	sdiv	r6, r1, r3
 80a1588:	203c      	movs	r0, #60	; 0x3c
 80a158a:	fb03 1316 	mls	r3, r3, r6, r1
 80a158e:	fb93 f2f0 	sdiv	r2, r3, r0
 80a1592:	fb00 3012 	mls	r0, r0, r2, r3
 80a1596:	6861      	ldr	r1, [r4, #4]
 80a1598:	6823      	ldr	r3, [r4, #0]
 80a159a:	1a89      	subs	r1, r1, r2
 80a159c:	68a2      	ldr	r2, [r4, #8]
 80a159e:	1a1b      	subs	r3, r3, r0
 80a15a0:	1b92      	subs	r2, r2, r6
 80a15a2:	2b3b      	cmp	r3, #59	; 0x3b
 80a15a4:	6023      	str	r3, [r4, #0]
 80a15a6:	6061      	str	r1, [r4, #4]
 80a15a8:	60a2      	str	r2, [r4, #8]
 80a15aa:	dd34      	ble.n	80a1616 <localtime_r+0x15a>
 80a15ac:	3101      	adds	r1, #1
 80a15ae:	6061      	str	r1, [r4, #4]
 80a15b0:	3b3c      	subs	r3, #60	; 0x3c
 80a15b2:	6023      	str	r3, [r4, #0]
 80a15b4:	6863      	ldr	r3, [r4, #4]
 80a15b6:	2b3b      	cmp	r3, #59	; 0x3b
 80a15b8:	dd33      	ble.n	80a1622 <localtime_r+0x166>
 80a15ba:	3201      	adds	r2, #1
 80a15bc:	60a2      	str	r2, [r4, #8]
 80a15be:	3b3c      	subs	r3, #60	; 0x3c
 80a15c0:	6063      	str	r3, [r4, #4]
 80a15c2:	68a3      	ldr	r3, [r4, #8]
 80a15c4:	2b17      	cmp	r3, #23
 80a15c6:	dd32      	ble.n	80a162e <localtime_r+0x172>
 80a15c8:	69e2      	ldr	r2, [r4, #28]
 80a15ca:	3b18      	subs	r3, #24
 80a15cc:	3201      	adds	r2, #1
 80a15ce:	61e2      	str	r2, [r4, #28]
 80a15d0:	69a2      	ldr	r2, [r4, #24]
 80a15d2:	60a3      	str	r3, [r4, #8]
 80a15d4:	3201      	adds	r2, #1
 80a15d6:	2a06      	cmp	r2, #6
 80a15d8:	bfc8      	it	gt
 80a15da:	2200      	movgt	r2, #0
 80a15dc:	61a2      	str	r2, [r4, #24]
 80a15de:	68e2      	ldr	r2, [r4, #12]
 80a15e0:	6923      	ldr	r3, [r4, #16]
 80a15e2:	3201      	adds	r2, #1
 80a15e4:	60e2      	str	r2, [r4, #12]
 80a15e6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a15ea:	428a      	cmp	r2, r1
 80a15ec:	dd0e      	ble.n	80a160c <localtime_r+0x150>
 80a15ee:	2b0b      	cmp	r3, #11
 80a15f0:	eba2 0201 	sub.w	r2, r2, r1
 80a15f4:	60e2      	str	r2, [r4, #12]
 80a15f6:	f103 0201 	add.w	r2, r3, #1
 80a15fa:	bf05      	ittet	eq
 80a15fc:	2200      	moveq	r2, #0
 80a15fe:	6963      	ldreq	r3, [r4, #20]
 80a1600:	6122      	strne	r2, [r4, #16]
 80a1602:	3301      	addeq	r3, #1
 80a1604:	bf02      	ittt	eq
 80a1606:	6122      	streq	r2, [r4, #16]
 80a1608:	6163      	streq	r3, [r4, #20]
 80a160a:	61e2      	streq	r2, [r4, #28]
 80a160c:	f000 f9e6 	bl	80a19dc <__tz_unlock>
 80a1610:	4620      	mov	r0, r4
 80a1612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1616:	2b00      	cmp	r3, #0
 80a1618:	dacc      	bge.n	80a15b4 <localtime_r+0xf8>
 80a161a:	3901      	subs	r1, #1
 80a161c:	6061      	str	r1, [r4, #4]
 80a161e:	333c      	adds	r3, #60	; 0x3c
 80a1620:	e7c7      	b.n	80a15b2 <localtime_r+0xf6>
 80a1622:	2b00      	cmp	r3, #0
 80a1624:	dacd      	bge.n	80a15c2 <localtime_r+0x106>
 80a1626:	3a01      	subs	r2, #1
 80a1628:	60a2      	str	r2, [r4, #8]
 80a162a:	333c      	adds	r3, #60	; 0x3c
 80a162c:	e7c8      	b.n	80a15c0 <localtime_r+0x104>
 80a162e:	2b00      	cmp	r3, #0
 80a1630:	daec      	bge.n	80a160c <localtime_r+0x150>
 80a1632:	69e2      	ldr	r2, [r4, #28]
 80a1634:	3318      	adds	r3, #24
 80a1636:	3a01      	subs	r2, #1
 80a1638:	61e2      	str	r2, [r4, #28]
 80a163a:	69a2      	ldr	r2, [r4, #24]
 80a163c:	60a3      	str	r3, [r4, #8]
 80a163e:	3a01      	subs	r2, #1
 80a1640:	bf48      	it	mi
 80a1642:	2206      	movmi	r2, #6
 80a1644:	61a2      	str	r2, [r4, #24]
 80a1646:	68e2      	ldr	r2, [r4, #12]
 80a1648:	3a01      	subs	r2, #1
 80a164a:	60e2      	str	r2, [r4, #12]
 80a164c:	2a00      	cmp	r2, #0
 80a164e:	d1dd      	bne.n	80a160c <localtime_r+0x150>
 80a1650:	6923      	ldr	r3, [r4, #16]
 80a1652:	3b01      	subs	r3, #1
 80a1654:	d405      	bmi.n	80a1662 <localtime_r+0x1a6>
 80a1656:	6123      	str	r3, [r4, #16]
 80a1658:	6923      	ldr	r3, [r4, #16]
 80a165a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a165e:	60e3      	str	r3, [r4, #12]
 80a1660:	e7d4      	b.n	80a160c <localtime_r+0x150>
 80a1662:	230b      	movs	r3, #11
 80a1664:	6123      	str	r3, [r4, #16]
 80a1666:	6963      	ldr	r3, [r4, #20]
 80a1668:	1e5a      	subs	r2, r3, #1
 80a166a:	6162      	str	r2, [r4, #20]
 80a166c:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80a1670:	0793      	lsls	r3, r2, #30
 80a1672:	d105      	bne.n	80a1680 <localtime_r+0x1c4>
 80a1674:	2164      	movs	r1, #100	; 0x64
 80a1676:	fb92 f3f1 	sdiv	r3, r2, r1
 80a167a:	fb01 2313 	mls	r3, r1, r3, r2
 80a167e:	b963      	cbnz	r3, 80a169a <localtime_r+0x1de>
 80a1680:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a1684:	fb92 f3f1 	sdiv	r3, r2, r1
 80a1688:	fb01 2313 	mls	r3, r1, r3, r2
 80a168c:	fab3 f383 	clz	r3, r3
 80a1690:	095b      	lsrs	r3, r3, #5
 80a1692:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a1696:	61e3      	str	r3, [r4, #28]
 80a1698:	e7de      	b.n	80a1658 <localtime_r+0x19c>
 80a169a:	2301      	movs	r3, #1
 80a169c:	e7f9      	b.n	80a1692 <localtime_r+0x1d6>
 80a169e:	bf00      	nop
 80a16a0:	080a2220 	.word	0x080a2220
 80a16a4:	200005e4 	.word	0x200005e4

080a16a8 <memcpy>:
 80a16a8:	440a      	add	r2, r1
 80a16aa:	4291      	cmp	r1, r2
 80a16ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80a16b0:	d100      	bne.n	80a16b4 <memcpy+0xc>
 80a16b2:	4770      	bx	lr
 80a16b4:	b510      	push	{r4, lr}
 80a16b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a16ba:	4291      	cmp	r1, r2
 80a16bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a16c0:	d1f9      	bne.n	80a16b6 <memcpy+0xe>
 80a16c2:	bd10      	pop	{r4, pc}

080a16c4 <memset>:
 80a16c4:	4603      	mov	r3, r0
 80a16c6:	4402      	add	r2, r0
 80a16c8:	4293      	cmp	r3, r2
 80a16ca:	d100      	bne.n	80a16ce <memset+0xa>
 80a16cc:	4770      	bx	lr
 80a16ce:	f803 1b01 	strb.w	r1, [r3], #1
 80a16d2:	e7f9      	b.n	80a16c8 <memset+0x4>

080a16d4 <srand>:
 80a16d4:	b538      	push	{r3, r4, r5, lr}
 80a16d6:	4b0d      	ldr	r3, [pc, #52]	; (80a170c <srand+0x38>)
 80a16d8:	4604      	mov	r4, r0
 80a16da:	681d      	ldr	r5, [r3, #0]
 80a16dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a16de:	b97b      	cbnz	r3, 80a1700 <srand+0x2c>
 80a16e0:	2018      	movs	r0, #24
 80a16e2:	f7fe ff43 	bl	80a056c <malloc>
 80a16e6:	4a0a      	ldr	r2, [pc, #40]	; (80a1710 <srand+0x3c>)
 80a16e8:	4b0a      	ldr	r3, [pc, #40]	; (80a1714 <srand+0x40>)
 80a16ea:	63a8      	str	r0, [r5, #56]	; 0x38
 80a16ec:	e9c0 2300 	strd	r2, r3, [r0]
 80a16f0:	4b09      	ldr	r3, [pc, #36]	; (80a1718 <srand+0x44>)
 80a16f2:	2201      	movs	r2, #1
 80a16f4:	6083      	str	r3, [r0, #8]
 80a16f6:	230b      	movs	r3, #11
 80a16f8:	8183      	strh	r3, [r0, #12]
 80a16fa:	2300      	movs	r3, #0
 80a16fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1700:	2200      	movs	r2, #0
 80a1702:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1704:	611c      	str	r4, [r3, #16]
 80a1706:	615a      	str	r2, [r3, #20]
 80a1708:	bd38      	pop	{r3, r4, r5, pc}
 80a170a:	bf00      	nop
 80a170c:	20000008 	.word	0x20000008
 80a1710:	abcd330e 	.word	0xabcd330e
 80a1714:	e66d1234 	.word	0xe66d1234
 80a1718:	0005deec 	.word	0x0005deec

080a171c <strcmp>:
 80a171c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a1720:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a1724:	2a01      	cmp	r2, #1
 80a1726:	bf28      	it	cs
 80a1728:	429a      	cmpcs	r2, r3
 80a172a:	d0f7      	beq.n	80a171c <strcmp>
 80a172c:	1ad0      	subs	r0, r2, r3
 80a172e:	4770      	bx	lr

080a1730 <strcpy>:
 80a1730:	4603      	mov	r3, r0
 80a1732:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a1736:	f803 2b01 	strb.w	r2, [r3], #1
 80a173a:	2a00      	cmp	r2, #0
 80a173c:	d1f9      	bne.n	80a1732 <strcpy+0x2>
 80a173e:	4770      	bx	lr

080a1740 <strlen>:
 80a1740:	4603      	mov	r3, r0
 80a1742:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1746:	2a00      	cmp	r2, #0
 80a1748:	d1fb      	bne.n	80a1742 <strlen+0x2>
 80a174a:	1a18      	subs	r0, r3, r0
 80a174c:	3801      	subs	r0, #1
 80a174e:	4770      	bx	lr

080a1750 <strncmp>:
 80a1750:	b510      	push	{r4, lr}
 80a1752:	b16a      	cbz	r2, 80a1770 <strncmp+0x20>
 80a1754:	3901      	subs	r1, #1
 80a1756:	1884      	adds	r4, r0, r2
 80a1758:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a175c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a1760:	4293      	cmp	r3, r2
 80a1762:	d103      	bne.n	80a176c <strncmp+0x1c>
 80a1764:	42a0      	cmp	r0, r4
 80a1766:	d001      	beq.n	80a176c <strncmp+0x1c>
 80a1768:	2b00      	cmp	r3, #0
 80a176a:	d1f5      	bne.n	80a1758 <strncmp+0x8>
 80a176c:	1a98      	subs	r0, r3, r2
 80a176e:	bd10      	pop	{r4, pc}
 80a1770:	4610      	mov	r0, r2
 80a1772:	e7fc      	b.n	80a176e <strncmp+0x1e>

080a1774 <_strtoul_l.isra.0>:
 80a1774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1778:	468c      	mov	ip, r1
 80a177a:	4686      	mov	lr, r0
 80a177c:	4e3a      	ldr	r6, [pc, #232]	; (80a1868 <_strtoul_l.isra.0+0xf4>)
 80a177e:	4660      	mov	r0, ip
 80a1780:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a1784:	5da5      	ldrb	r5, [r4, r6]
 80a1786:	f015 0508 	ands.w	r5, r5, #8
 80a178a:	d1f8      	bne.n	80a177e <_strtoul_l.isra.0+0xa>
 80a178c:	2c2d      	cmp	r4, #45	; 0x2d
 80a178e:	d134      	bne.n	80a17fa <_strtoul_l.isra.0+0x86>
 80a1790:	f04f 0801 	mov.w	r8, #1
 80a1794:	f89c 4000 	ldrb.w	r4, [ip]
 80a1798:	f100 0c02 	add.w	ip, r0, #2
 80a179c:	2b00      	cmp	r3, #0
 80a179e:	d05e      	beq.n	80a185e <_strtoul_l.isra.0+0xea>
 80a17a0:	2b10      	cmp	r3, #16
 80a17a2:	d10c      	bne.n	80a17be <_strtoul_l.isra.0+0x4a>
 80a17a4:	2c30      	cmp	r4, #48	; 0x30
 80a17a6:	d10a      	bne.n	80a17be <_strtoul_l.isra.0+0x4a>
 80a17a8:	f89c 0000 	ldrb.w	r0, [ip]
 80a17ac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a17b0:	2858      	cmp	r0, #88	; 0x58
 80a17b2:	d14f      	bne.n	80a1854 <_strtoul_l.isra.0+0xe0>
 80a17b4:	2310      	movs	r3, #16
 80a17b6:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a17ba:	f10c 0c02 	add.w	ip, ip, #2
 80a17be:	f04f 37ff 	mov.w	r7, #4294967295
 80a17c2:	fbb7 f7f3 	udiv	r7, r7, r3
 80a17c6:	2500      	movs	r5, #0
 80a17c8:	fb03 f907 	mul.w	r9, r3, r7
 80a17cc:	4628      	mov	r0, r5
 80a17ce:	ea6f 0909 	mvn.w	r9, r9
 80a17d2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80a17d6:	2e09      	cmp	r6, #9
 80a17d8:	d818      	bhi.n	80a180c <_strtoul_l.isra.0+0x98>
 80a17da:	4634      	mov	r4, r6
 80a17dc:	42a3      	cmp	r3, r4
 80a17de:	dd24      	ble.n	80a182a <_strtoul_l.isra.0+0xb6>
 80a17e0:	2d00      	cmp	r5, #0
 80a17e2:	db1f      	blt.n	80a1824 <_strtoul_l.isra.0+0xb0>
 80a17e4:	4287      	cmp	r7, r0
 80a17e6:	d31d      	bcc.n	80a1824 <_strtoul_l.isra.0+0xb0>
 80a17e8:	d101      	bne.n	80a17ee <_strtoul_l.isra.0+0x7a>
 80a17ea:	45a1      	cmp	r9, r4
 80a17ec:	db1a      	blt.n	80a1824 <_strtoul_l.isra.0+0xb0>
 80a17ee:	2501      	movs	r5, #1
 80a17f0:	fb00 4003 	mla	r0, r0, r3, r4
 80a17f4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a17f8:	e7eb      	b.n	80a17d2 <_strtoul_l.isra.0+0x5e>
 80a17fa:	2c2b      	cmp	r4, #43	; 0x2b
 80a17fc:	bf08      	it	eq
 80a17fe:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a1802:	46a8      	mov	r8, r5
 80a1804:	bf08      	it	eq
 80a1806:	f100 0c02 	addeq.w	ip, r0, #2
 80a180a:	e7c7      	b.n	80a179c <_strtoul_l.isra.0+0x28>
 80a180c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80a1810:	2e19      	cmp	r6, #25
 80a1812:	d801      	bhi.n	80a1818 <_strtoul_l.isra.0+0xa4>
 80a1814:	3c37      	subs	r4, #55	; 0x37
 80a1816:	e7e1      	b.n	80a17dc <_strtoul_l.isra.0+0x68>
 80a1818:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80a181c:	2e19      	cmp	r6, #25
 80a181e:	d804      	bhi.n	80a182a <_strtoul_l.isra.0+0xb6>
 80a1820:	3c57      	subs	r4, #87	; 0x57
 80a1822:	e7db      	b.n	80a17dc <_strtoul_l.isra.0+0x68>
 80a1824:	f04f 35ff 	mov.w	r5, #4294967295
 80a1828:	e7e4      	b.n	80a17f4 <_strtoul_l.isra.0+0x80>
 80a182a:	2d00      	cmp	r5, #0
 80a182c:	da07      	bge.n	80a183e <_strtoul_l.isra.0+0xca>
 80a182e:	2322      	movs	r3, #34	; 0x22
 80a1830:	f04f 30ff 	mov.w	r0, #4294967295
 80a1834:	f8ce 3000 	str.w	r3, [lr]
 80a1838:	b942      	cbnz	r2, 80a184c <_strtoul_l.isra.0+0xd8>
 80a183a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a183e:	f1b8 0f00 	cmp.w	r8, #0
 80a1842:	d000      	beq.n	80a1846 <_strtoul_l.isra.0+0xd2>
 80a1844:	4240      	negs	r0, r0
 80a1846:	2a00      	cmp	r2, #0
 80a1848:	d0f7      	beq.n	80a183a <_strtoul_l.isra.0+0xc6>
 80a184a:	b10d      	cbz	r5, 80a1850 <_strtoul_l.isra.0+0xdc>
 80a184c:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a1850:	6011      	str	r1, [r2, #0]
 80a1852:	e7f2      	b.n	80a183a <_strtoul_l.isra.0+0xc6>
 80a1854:	2430      	movs	r4, #48	; 0x30
 80a1856:	2b00      	cmp	r3, #0
 80a1858:	d1b1      	bne.n	80a17be <_strtoul_l.isra.0+0x4a>
 80a185a:	2308      	movs	r3, #8
 80a185c:	e7af      	b.n	80a17be <_strtoul_l.isra.0+0x4a>
 80a185e:	2c30      	cmp	r4, #48	; 0x30
 80a1860:	d0a2      	beq.n	80a17a8 <_strtoul_l.isra.0+0x34>
 80a1862:	230a      	movs	r3, #10
 80a1864:	e7ab      	b.n	80a17be <_strtoul_l.isra.0+0x4a>
 80a1866:	bf00      	nop
 80a1868:	080a22bd 	.word	0x080a22bd

080a186c <strtoul>:
 80a186c:	4613      	mov	r3, r2
 80a186e:	460a      	mov	r2, r1
 80a1870:	4601      	mov	r1, r0
 80a1872:	4802      	ldr	r0, [pc, #8]	; (80a187c <strtoul+0x10>)
 80a1874:	6800      	ldr	r0, [r0, #0]
 80a1876:	f7ff bf7d 	b.w	80a1774 <_strtoul_l.isra.0>
 80a187a:	bf00      	nop
 80a187c:	20000008 	.word	0x20000008

080a1880 <__tzcalc_limits>:
 80a1880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1884:	4680      	mov	r8, r0
 80a1886:	f000 fadb 	bl	80a1e40 <__gettzinfo>
 80a188a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a188e:	4598      	cmp	r8, r3
 80a1890:	f340 8097 	ble.w	80a19c2 <__tzcalc_limits+0x142>
 80a1894:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a1898:	f240 126d 	movw	r2, #365	; 0x16d
 80a189c:	4443      	add	r3, r8
 80a189e:	109b      	asrs	r3, r3, #2
 80a18a0:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80a18a4:	fb02 3505 	mla	r5, r2, r5, r3
 80a18a8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a18ac:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80a18b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80a18b4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a18b8:	441d      	add	r5, r3
 80a18ba:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a18be:	4442      	add	r2, r8
 80a18c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80a18c4:	fb98 f7f3 	sdiv	r7, r8, r3
 80a18c8:	4415      	add	r5, r2
 80a18ca:	2264      	movs	r2, #100	; 0x64
 80a18cc:	fb03 8717 	mls	r7, r3, r7, r8
 80a18d0:	fb98 f6f2 	sdiv	r6, r8, r2
 80a18d4:	fab7 fc87 	clz	ip, r7
 80a18d8:	4604      	mov	r4, r0
 80a18da:	f04f 0e07 	mov.w	lr, #7
 80a18de:	fb02 8616 	mls	r6, r2, r6, r8
 80a18e2:	f008 0303 	and.w	r3, r8, #3
 80a18e6:	f8c0 8004 	str.w	r8, [r0, #4]
 80a18ea:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80a18ee:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a18f2:	9300      	str	r3, [sp, #0]
 80a18f4:	7a22      	ldrb	r2, [r4, #8]
 80a18f6:	6963      	ldr	r3, [r4, #20]
 80a18f8:	2a4a      	cmp	r2, #74	; 0x4a
 80a18fa:	d128      	bne.n	80a194e <__tzcalc_limits+0xce>
 80a18fc:	9900      	ldr	r1, [sp, #0]
 80a18fe:	18ea      	adds	r2, r5, r3
 80a1900:	b901      	cbnz	r1, 80a1904 <__tzcalc_limits+0x84>
 80a1902:	b906      	cbnz	r6, 80a1906 <__tzcalc_limits+0x86>
 80a1904:	bb0f      	cbnz	r7, 80a194a <__tzcalc_limits+0xca>
 80a1906:	2b3b      	cmp	r3, #59	; 0x3b
 80a1908:	bfd4      	ite	le
 80a190a:	2300      	movle	r3, #0
 80a190c:	2301      	movgt	r3, #1
 80a190e:	4413      	add	r3, r2
 80a1910:	1e5a      	subs	r2, r3, #1
 80a1912:	69a3      	ldr	r3, [r4, #24]
 80a1914:	492c      	ldr	r1, [pc, #176]	; (80a19c8 <__tzcalc_limits+0x148>)
 80a1916:	3428      	adds	r4, #40	; 0x28
 80a1918:	fb01 3202 	mla	r2, r1, r2, r3
 80a191c:	6823      	ldr	r3, [r4, #0]
 80a191e:	4413      	add	r3, r2
 80a1920:	461a      	mov	r2, r3
 80a1922:	17db      	asrs	r3, r3, #31
 80a1924:	e944 2302 	strd	r2, r3, [r4, #-8]
 80a1928:	45a3      	cmp	fp, r4
 80a192a:	d1e3      	bne.n	80a18f4 <__tzcalc_limits+0x74>
 80a192c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80a1930:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80a1934:	4294      	cmp	r4, r2
 80a1936:	eb75 0303 	sbcs.w	r3, r5, r3
 80a193a:	bfb4      	ite	lt
 80a193c:	2301      	movlt	r3, #1
 80a193e:	2300      	movge	r3, #0
 80a1940:	6003      	str	r3, [r0, #0]
 80a1942:	2001      	movs	r0, #1
 80a1944:	b003      	add	sp, #12
 80a1946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a194a:	2300      	movs	r3, #0
 80a194c:	e7df      	b.n	80a190e <__tzcalc_limits+0x8e>
 80a194e:	2a44      	cmp	r2, #68	; 0x44
 80a1950:	d101      	bne.n	80a1956 <__tzcalc_limits+0xd6>
 80a1952:	18ea      	adds	r2, r5, r3
 80a1954:	e7dd      	b.n	80a1912 <__tzcalc_limits+0x92>
 80a1956:	9a00      	ldr	r2, [sp, #0]
 80a1958:	bb6a      	cbnz	r2, 80a19b6 <__tzcalc_limits+0x136>
 80a195a:	2e00      	cmp	r6, #0
 80a195c:	bf0c      	ite	eq
 80a195e:	46e0      	moveq	r8, ip
 80a1960:	f04f 0801 	movne.w	r8, #1
 80a1964:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80a1968:	68e2      	ldr	r2, [r4, #12]
 80a196a:	f04f 0900 	mov.w	r9, #0
 80a196e:	9201      	str	r2, [sp, #4]
 80a1970:	462a      	mov	r2, r5
 80a1972:	4916      	ldr	r1, [pc, #88]	; (80a19cc <__tzcalc_limits+0x14c>)
 80a1974:	fb0a 1808 	mla	r8, sl, r8, r1
 80a1978:	f1a8 0804 	sub.w	r8, r8, #4
 80a197c:	9901      	ldr	r1, [sp, #4]
 80a197e:	f109 0901 	add.w	r9, r9, #1
 80a1982:	4549      	cmp	r1, r9
 80a1984:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80a1988:	dc17      	bgt.n	80a19ba <__tzcalc_limits+0x13a>
 80a198a:	f102 0804 	add.w	r8, r2, #4
 80a198e:	fb98 f9fe 	sdiv	r9, r8, lr
 80a1992:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a1996:	eba8 0909 	sub.w	r9, r8, r9
 80a199a:	ebb3 0909 	subs.w	r9, r3, r9
 80a199e:	6923      	ldr	r3, [r4, #16]
 80a19a0:	bf48      	it	mi
 80a19a2:	f109 0907 	addmi.w	r9, r9, #7
 80a19a6:	3b01      	subs	r3, #1
 80a19a8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a19ac:	444b      	add	r3, r9
 80a19ae:	4553      	cmp	r3, sl
 80a19b0:	da05      	bge.n	80a19be <__tzcalc_limits+0x13e>
 80a19b2:	441a      	add	r2, r3
 80a19b4:	e7ad      	b.n	80a1912 <__tzcalc_limits+0x92>
 80a19b6:	46e0      	mov	r8, ip
 80a19b8:	e7d4      	b.n	80a1964 <__tzcalc_limits+0xe4>
 80a19ba:	4452      	add	r2, sl
 80a19bc:	e7de      	b.n	80a197c <__tzcalc_limits+0xfc>
 80a19be:	3b07      	subs	r3, #7
 80a19c0:	e7f5      	b.n	80a19ae <__tzcalc_limits+0x12e>
 80a19c2:	2000      	movs	r0, #0
 80a19c4:	e7be      	b.n	80a1944 <__tzcalc_limits+0xc4>
 80a19c6:	bf00      	nop
 80a19c8:	00015180 	.word	0x00015180
 80a19cc:	080a2220 	.word	0x080a2220

080a19d0 <__tz_lock>:
 80a19d0:	4801      	ldr	r0, [pc, #4]	; (80a19d8 <__tz_lock+0x8>)
 80a19d2:	f000 bae9 	b.w	80a1fa8 <__retarget_lock_acquire>
 80a19d6:	bf00      	nop
 80a19d8:	20000687 	.word	0x20000687

080a19dc <__tz_unlock>:
 80a19dc:	4801      	ldr	r0, [pc, #4]	; (80a19e4 <__tz_unlock+0x8>)
 80a19de:	f000 bae5 	b.w	80a1fac <__retarget_lock_release>
 80a19e2:	bf00      	nop
 80a19e4:	20000687 	.word	0x20000687

080a19e8 <_tzset_unlocked>:
 80a19e8:	4b01      	ldr	r3, [pc, #4]	; (80a19f0 <_tzset_unlocked+0x8>)
 80a19ea:	6818      	ldr	r0, [r3, #0]
 80a19ec:	f000 b802 	b.w	80a19f4 <_tzset_unlocked_r>
 80a19f0:	20000008 	.word	0x20000008

080a19f4 <_tzset_unlocked_r>:
 80a19f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a19f8:	b08d      	sub	sp, #52	; 0x34
 80a19fa:	4607      	mov	r7, r0
 80a19fc:	f000 fa20 	bl	80a1e40 <__gettzinfo>
 80a1a00:	49b0      	ldr	r1, [pc, #704]	; (80a1cc4 <_tzset_unlocked_r+0x2d0>)
 80a1a02:	4605      	mov	r5, r0
 80a1a04:	4638      	mov	r0, r7
 80a1a06:	f000 fa13 	bl	80a1e30 <_getenv_r>
 80a1a0a:	4eaf      	ldr	r6, [pc, #700]	; (80a1cc8 <_tzset_unlocked_r+0x2d4>)
 80a1a0c:	4604      	mov	r4, r0
 80a1a0e:	b970      	cbnz	r0, 80a1a2e <_tzset_unlocked_r+0x3a>
 80a1a10:	4bae      	ldr	r3, [pc, #696]	; (80a1ccc <_tzset_unlocked_r+0x2d8>)
 80a1a12:	4aaf      	ldr	r2, [pc, #700]	; (80a1cd0 <_tzset_unlocked_r+0x2dc>)
 80a1a14:	6018      	str	r0, [r3, #0]
 80a1a16:	4baf      	ldr	r3, [pc, #700]	; (80a1cd4 <_tzset_unlocked_r+0x2e0>)
 80a1a18:	6018      	str	r0, [r3, #0]
 80a1a1a:	4baf      	ldr	r3, [pc, #700]	; (80a1cd8 <_tzset_unlocked_r+0x2e4>)
 80a1a1c:	6830      	ldr	r0, [r6, #0]
 80a1a1e:	e9c3 2200 	strd	r2, r2, [r3]
 80a1a22:	f7fe fdab 	bl	80a057c <free>
 80a1a26:	6034      	str	r4, [r6, #0]
 80a1a28:	b00d      	add	sp, #52	; 0x34
 80a1a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1a2e:	6831      	ldr	r1, [r6, #0]
 80a1a30:	2900      	cmp	r1, #0
 80a1a32:	d15f      	bne.n	80a1af4 <_tzset_unlocked_r+0x100>
 80a1a34:	6830      	ldr	r0, [r6, #0]
 80a1a36:	f7fe fda1 	bl	80a057c <free>
 80a1a3a:	4620      	mov	r0, r4
 80a1a3c:	f7ff fe80 	bl	80a1740 <strlen>
 80a1a40:	1c41      	adds	r1, r0, #1
 80a1a42:	4638      	mov	r0, r7
 80a1a44:	f7fe fdc2 	bl	80a05cc <_malloc_r>
 80a1a48:	6030      	str	r0, [r6, #0]
 80a1a4a:	2800      	cmp	r0, #0
 80a1a4c:	d157      	bne.n	80a1afe <_tzset_unlocked_r+0x10a>
 80a1a4e:	7823      	ldrb	r3, [r4, #0]
 80a1a50:	ae0a      	add	r6, sp, #40	; 0x28
 80a1a52:	2b3a      	cmp	r3, #58	; 0x3a
 80a1a54:	bf08      	it	eq
 80a1a56:	3401      	addeq	r4, #1
 80a1a58:	4633      	mov	r3, r6
 80a1a5a:	4620      	mov	r0, r4
 80a1a5c:	4a9f      	ldr	r2, [pc, #636]	; (80a1cdc <_tzset_unlocked_r+0x2e8>)
 80a1a5e:	49a0      	ldr	r1, [pc, #640]	; (80a1ce0 <_tzset_unlocked_r+0x2ec>)
 80a1a60:	f7fe fda4 	bl	80a05ac <siscanf>
 80a1a64:	2800      	cmp	r0, #0
 80a1a66:	dddf      	ble.n	80a1a28 <_tzset_unlocked_r+0x34>
 80a1a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1a6a:	18e7      	adds	r7, r4, r3
 80a1a6c:	5ce3      	ldrb	r3, [r4, r3]
 80a1a6e:	2b2d      	cmp	r3, #45	; 0x2d
 80a1a70:	d149      	bne.n	80a1b06 <_tzset_unlocked_r+0x112>
 80a1a72:	f04f 34ff 	mov.w	r4, #4294967295
 80a1a76:	3701      	adds	r7, #1
 80a1a78:	f04f 0800 	mov.w	r8, #0
 80a1a7c:	f10d 0a20 	add.w	sl, sp, #32
 80a1a80:	f10d 0b1e 	add.w	fp, sp, #30
 80a1a84:	4633      	mov	r3, r6
 80a1a86:	4638      	mov	r0, r7
 80a1a88:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a1a8c:	4995      	ldr	r1, [pc, #596]	; (80a1ce4 <_tzset_unlocked_r+0x2f0>)
 80a1a8e:	9603      	str	r6, [sp, #12]
 80a1a90:	f8cd b000 	str.w	fp, [sp]
 80a1a94:	aa07      	add	r2, sp, #28
 80a1a96:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a1a9a:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a1a9e:	f7fe fd85 	bl	80a05ac <siscanf>
 80a1aa2:	4540      	cmp	r0, r8
 80a1aa4:	ddc0      	ble.n	80a1a28 <_tzset_unlocked_r+0x34>
 80a1aa6:	213c      	movs	r1, #60	; 0x3c
 80a1aa8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a1aac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a1ab0:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a1cf0 <_tzset_unlocked_r+0x2fc>
 80a1ab4:	fb01 2203 	mla	r2, r1, r3, r2
 80a1ab8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a1abc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a1ac0:	fb01 2303 	mla	r3, r1, r3, r2
 80a1ac4:	435c      	muls	r4, r3
 80a1ac6:	4b85      	ldr	r3, [pc, #532]	; (80a1cdc <_tzset_unlocked_r+0x2e8>)
 80a1ac8:	62ac      	str	r4, [r5, #40]	; 0x28
 80a1aca:	4c83      	ldr	r4, [pc, #524]	; (80a1cd8 <_tzset_unlocked_r+0x2e4>)
 80a1acc:	464a      	mov	r2, r9
 80a1ace:	6023      	str	r3, [r4, #0]
 80a1ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1ad2:	4983      	ldr	r1, [pc, #524]	; (80a1ce0 <_tzset_unlocked_r+0x2ec>)
 80a1ad4:	441f      	add	r7, r3
 80a1ad6:	4638      	mov	r0, r7
 80a1ad8:	4633      	mov	r3, r6
 80a1ada:	f7fe fd67 	bl	80a05ac <siscanf>
 80a1ade:	4540      	cmp	r0, r8
 80a1ae0:	dc17      	bgt.n	80a1b12 <_tzset_unlocked_r+0x11e>
 80a1ae2:	6823      	ldr	r3, [r4, #0]
 80a1ae4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a1ae6:	6063      	str	r3, [r4, #4]
 80a1ae8:	4b78      	ldr	r3, [pc, #480]	; (80a1ccc <_tzset_unlocked_r+0x2d8>)
 80a1aea:	601a      	str	r2, [r3, #0]
 80a1aec:	4b79      	ldr	r3, [pc, #484]	; (80a1cd4 <_tzset_unlocked_r+0x2e0>)
 80a1aee:	f8c3 8000 	str.w	r8, [r3]
 80a1af2:	e799      	b.n	80a1a28 <_tzset_unlocked_r+0x34>
 80a1af4:	f7ff fe12 	bl	80a171c <strcmp>
 80a1af8:	2800      	cmp	r0, #0
 80a1afa:	d19b      	bne.n	80a1a34 <_tzset_unlocked_r+0x40>
 80a1afc:	e794      	b.n	80a1a28 <_tzset_unlocked_r+0x34>
 80a1afe:	4621      	mov	r1, r4
 80a1b00:	f7ff fe16 	bl	80a1730 <strcpy>
 80a1b04:	e7a3      	b.n	80a1a4e <_tzset_unlocked_r+0x5a>
 80a1b06:	2b2b      	cmp	r3, #43	; 0x2b
 80a1b08:	f04f 0401 	mov.w	r4, #1
 80a1b0c:	bf08      	it	eq
 80a1b0e:	3701      	addeq	r7, #1
 80a1b10:	e7b2      	b.n	80a1a78 <_tzset_unlocked_r+0x84>
 80a1b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1b14:	f8c4 9004 	str.w	r9, [r4, #4]
 80a1b18:	18fc      	adds	r4, r7, r3
 80a1b1a:	5cfb      	ldrb	r3, [r7, r3]
 80a1b1c:	2b2d      	cmp	r3, #45	; 0x2d
 80a1b1e:	f040 808c 	bne.w	80a1c3a <_tzset_unlocked_r+0x246>
 80a1b22:	f04f 37ff 	mov.w	r7, #4294967295
 80a1b26:	3401      	adds	r4, #1
 80a1b28:	2300      	movs	r3, #0
 80a1b2a:	4620      	mov	r0, r4
 80a1b2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a1b30:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a1b34:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a1b38:	930a      	str	r3, [sp, #40]	; 0x28
 80a1b3a:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a1b3e:	4633      	mov	r3, r6
 80a1b40:	e9cd b600 	strd	fp, r6, [sp]
 80a1b44:	4967      	ldr	r1, [pc, #412]	; (80a1ce4 <_tzset_unlocked_r+0x2f0>)
 80a1b46:	aa07      	add	r2, sp, #28
 80a1b48:	f7fe fd30 	bl	80a05ac <siscanf>
 80a1b4c:	2800      	cmp	r0, #0
 80a1b4e:	dc7a      	bgt.n	80a1c46 <_tzset_unlocked_r+0x252>
 80a1b50:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80a1b52:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80a1b56:	652f      	str	r7, [r5, #80]	; 0x50
 80a1b58:	f04f 0900 	mov.w	r9, #0
 80a1b5c:	462f      	mov	r7, r5
 80a1b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1b60:	441c      	add	r4, r3
 80a1b62:	7823      	ldrb	r3, [r4, #0]
 80a1b64:	2b2c      	cmp	r3, #44	; 0x2c
 80a1b66:	bf08      	it	eq
 80a1b68:	3401      	addeq	r4, #1
 80a1b6a:	f894 8000 	ldrb.w	r8, [r4]
 80a1b6e:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a1b72:	d17a      	bne.n	80a1c6a <_tzset_unlocked_r+0x276>
 80a1b74:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a1b78:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a1b7c:	ab09      	add	r3, sp, #36	; 0x24
 80a1b7e:	9300      	str	r3, [sp, #0]
 80a1b80:	4620      	mov	r0, r4
 80a1b82:	4633      	mov	r3, r6
 80a1b84:	4958      	ldr	r1, [pc, #352]	; (80a1ce8 <_tzset_unlocked_r+0x2f4>)
 80a1b86:	9603      	str	r6, [sp, #12]
 80a1b88:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a1b8c:	f7fe fd0e 	bl	80a05ac <siscanf>
 80a1b90:	2803      	cmp	r0, #3
 80a1b92:	f47f af49 	bne.w	80a1a28 <_tzset_unlocked_r+0x34>
 80a1b96:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a1b9a:	1e4b      	subs	r3, r1, #1
 80a1b9c:	2b0b      	cmp	r3, #11
 80a1b9e:	f63f af43 	bhi.w	80a1a28 <_tzset_unlocked_r+0x34>
 80a1ba2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a1ba6:	1e53      	subs	r3, r2, #1
 80a1ba8:	2b04      	cmp	r3, #4
 80a1baa:	f63f af3d 	bhi.w	80a1a28 <_tzset_unlocked_r+0x34>
 80a1bae:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a1bb2:	2b06      	cmp	r3, #6
 80a1bb4:	f63f af38 	bhi.w	80a1a28 <_tzset_unlocked_r+0x34>
 80a1bb8:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a1bbc:	f887 8008 	strb.w	r8, [r7, #8]
 80a1bc0:	617b      	str	r3, [r7, #20]
 80a1bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1bc4:	eb04 0803 	add.w	r8, r4, r3
 80a1bc8:	2302      	movs	r3, #2
 80a1bca:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a1bce:	2300      	movs	r3, #0
 80a1bd0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a1bd4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a1bd8:	930a      	str	r3, [sp, #40]	; 0x28
 80a1bda:	f898 3000 	ldrb.w	r3, [r8]
 80a1bde:	2b2f      	cmp	r3, #47	; 0x2f
 80a1be0:	d109      	bne.n	80a1bf6 <_tzset_unlocked_r+0x202>
 80a1be2:	4633      	mov	r3, r6
 80a1be4:	4640      	mov	r0, r8
 80a1be6:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a1bea:	e9cd b600 	strd	fp, r6, [sp]
 80a1bee:	493f      	ldr	r1, [pc, #252]	; (80a1cec <_tzset_unlocked_r+0x2f8>)
 80a1bf0:	aa07      	add	r2, sp, #28
 80a1bf2:	f7fe fcdb 	bl	80a05ac <siscanf>
 80a1bf6:	213c      	movs	r1, #60	; 0x3c
 80a1bf8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a1bfc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a1c00:	3728      	adds	r7, #40	; 0x28
 80a1c02:	fb01 2203 	mla	r2, r1, r3, r2
 80a1c06:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a1c0a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a1c0e:	fb01 2303 	mla	r3, r1, r3, r2
 80a1c12:	f847 3c10 	str.w	r3, [r7, #-16]
 80a1c16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a1c18:	4444      	add	r4, r8
 80a1c1a:	f1b9 0f00 	cmp.w	r9, #0
 80a1c1e:	d021      	beq.n	80a1c64 <_tzset_unlocked_r+0x270>
 80a1c20:	6868      	ldr	r0, [r5, #4]
 80a1c22:	f7ff fe2d 	bl	80a1880 <__tzcalc_limits>
 80a1c26:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a1c28:	4b28      	ldr	r3, [pc, #160]	; (80a1ccc <_tzset_unlocked_r+0x2d8>)
 80a1c2a:	601a      	str	r2, [r3, #0]
 80a1c2c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a1c2e:	1a9b      	subs	r3, r3, r2
 80a1c30:	bf18      	it	ne
 80a1c32:	2301      	movne	r3, #1
 80a1c34:	4a27      	ldr	r2, [pc, #156]	; (80a1cd4 <_tzset_unlocked_r+0x2e0>)
 80a1c36:	6013      	str	r3, [r2, #0]
 80a1c38:	e6f6      	b.n	80a1a28 <_tzset_unlocked_r+0x34>
 80a1c3a:	2b2b      	cmp	r3, #43	; 0x2b
 80a1c3c:	f04f 0701 	mov.w	r7, #1
 80a1c40:	bf08      	it	eq
 80a1c42:	3401      	addeq	r4, #1
 80a1c44:	e770      	b.n	80a1b28 <_tzset_unlocked_r+0x134>
 80a1c46:	213c      	movs	r1, #60	; 0x3c
 80a1c48:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a1c4c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a1c50:	fb01 2203 	mla	r2, r1, r3, r2
 80a1c54:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a1c58:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a1c5c:	fb01 2303 	mla	r3, r1, r3, r2
 80a1c60:	435f      	muls	r7, r3
 80a1c62:	e778      	b.n	80a1b56 <_tzset_unlocked_r+0x162>
 80a1c64:	f04f 0901 	mov.w	r9, #1
 80a1c68:	e77b      	b.n	80a1b62 <_tzset_unlocked_r+0x16e>
 80a1c6a:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a1c6e:	bf0a      	itet	eq
 80a1c70:	4643      	moveq	r3, r8
 80a1c72:	2344      	movne	r3, #68	; 0x44
 80a1c74:	3401      	addeq	r4, #1
 80a1c76:	220a      	movs	r2, #10
 80a1c78:	4620      	mov	r0, r4
 80a1c7a:	a90b      	add	r1, sp, #44	; 0x2c
 80a1c7c:	9305      	str	r3, [sp, #20]
 80a1c7e:	f7ff fdf5 	bl	80a186c <strtoul>
 80a1c82:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a1c86:	9b05      	ldr	r3, [sp, #20]
 80a1c88:	45a0      	cmp	r8, r4
 80a1c8a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a1c8e:	d114      	bne.n	80a1cba <_tzset_unlocked_r+0x2c6>
 80a1c90:	234d      	movs	r3, #77	; 0x4d
 80a1c92:	f1b9 0f00 	cmp.w	r9, #0
 80a1c96:	d107      	bne.n	80a1ca8 <_tzset_unlocked_r+0x2b4>
 80a1c98:	2103      	movs	r1, #3
 80a1c9a:	722b      	strb	r3, [r5, #8]
 80a1c9c:	2302      	movs	r3, #2
 80a1c9e:	f8c5 9014 	str.w	r9, [r5, #20]
 80a1ca2:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a1ca6:	e78f      	b.n	80a1bc8 <_tzset_unlocked_r+0x1d4>
 80a1ca8:	220b      	movs	r2, #11
 80a1caa:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a1cae:	2301      	movs	r3, #1
 80a1cb0:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a1cb4:	2300      	movs	r3, #0
 80a1cb6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a1cb8:	e786      	b.n	80a1bc8 <_tzset_unlocked_r+0x1d4>
 80a1cba:	b280      	uxth	r0, r0
 80a1cbc:	723b      	strb	r3, [r7, #8]
 80a1cbe:	6178      	str	r0, [r7, #20]
 80a1cc0:	e782      	b.n	80a1bc8 <_tzset_unlocked_r+0x1d4>
 80a1cc2:	bf00      	nop
 80a1cc4:	080a2280 	.word	0x080a2280
 80a1cc8:	200005e0 	.word	0x200005e0
 80a1ccc:	200005e8 	.word	0x200005e8
 80a1cd0:	080a2283 	.word	0x080a2283
 80a1cd4:	200005e4 	.word	0x200005e4
 80a1cd8:	2000006c 	.word	0x2000006c
 80a1cdc:	200005d3 	.word	0x200005d3
 80a1ce0:	080a2287 	.word	0x080a2287
 80a1ce4:	080a22aa 	.word	0x080a22aa
 80a1ce8:	080a2296 	.word	0x080a2296
 80a1cec:	080a22a9 	.word	0x080a22a9
 80a1cf0:	200005c8 	.word	0x200005c8

080a1cf4 <__register_exitproc>:
 80a1cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1cf8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a1db8 <__register_exitproc+0xc4>
 80a1cfc:	4606      	mov	r6, r0
 80a1cfe:	f8d8 0000 	ldr.w	r0, [r8]
 80a1d02:	461f      	mov	r7, r3
 80a1d04:	460d      	mov	r5, r1
 80a1d06:	4691      	mov	r9, r2
 80a1d08:	f000 f94f 	bl	80a1faa <__retarget_lock_acquire_recursive>
 80a1d0c:	4b26      	ldr	r3, [pc, #152]	; (80a1da8 <__register_exitproc+0xb4>)
 80a1d0e:	681c      	ldr	r4, [r3, #0]
 80a1d10:	b934      	cbnz	r4, 80a1d20 <__register_exitproc+0x2c>
 80a1d12:	4c26      	ldr	r4, [pc, #152]	; (80a1dac <__register_exitproc+0xb8>)
 80a1d14:	601c      	str	r4, [r3, #0]
 80a1d16:	4b26      	ldr	r3, [pc, #152]	; (80a1db0 <__register_exitproc+0xbc>)
 80a1d18:	b113      	cbz	r3, 80a1d20 <__register_exitproc+0x2c>
 80a1d1a:	681b      	ldr	r3, [r3, #0]
 80a1d1c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a1d20:	6863      	ldr	r3, [r4, #4]
 80a1d22:	2b1f      	cmp	r3, #31
 80a1d24:	dd07      	ble.n	80a1d36 <__register_exitproc+0x42>
 80a1d26:	f8d8 0000 	ldr.w	r0, [r8]
 80a1d2a:	f000 f940 	bl	80a1fae <__retarget_lock_release_recursive>
 80a1d2e:	f04f 30ff 	mov.w	r0, #4294967295
 80a1d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1d36:	b35e      	cbz	r6, 80a1d90 <__register_exitproc+0x9c>
 80a1d38:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a1d3c:	b988      	cbnz	r0, 80a1d62 <__register_exitproc+0x6e>
 80a1d3e:	4b1d      	ldr	r3, [pc, #116]	; (80a1db4 <__register_exitproc+0xc0>)
 80a1d40:	b923      	cbnz	r3, 80a1d4c <__register_exitproc+0x58>
 80a1d42:	f8d8 0000 	ldr.w	r0, [r8]
 80a1d46:	f000 f931 	bl	80a1fac <__retarget_lock_release>
 80a1d4a:	e7f0      	b.n	80a1d2e <__register_exitproc+0x3a>
 80a1d4c:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a1d50:	f7fe fc0c 	bl	80a056c <malloc>
 80a1d54:	2800      	cmp	r0, #0
 80a1d56:	d0f4      	beq.n	80a1d42 <__register_exitproc+0x4e>
 80a1d58:	2300      	movs	r3, #0
 80a1d5a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a1d5e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a1d62:	2201      	movs	r2, #1
 80a1d64:	6863      	ldr	r3, [r4, #4]
 80a1d66:	2e02      	cmp	r6, #2
 80a1d68:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a1d6c:	fa02 f203 	lsl.w	r2, r2, r3
 80a1d70:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a1d74:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a1d78:	ea43 0302 	orr.w	r3, r3, r2
 80a1d7c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a1d80:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a1d84:	bf02      	ittt	eq
 80a1d86:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a1d8a:	431a      	orreq	r2, r3
 80a1d8c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a1d90:	6863      	ldr	r3, [r4, #4]
 80a1d92:	f8d8 0000 	ldr.w	r0, [r8]
 80a1d96:	1c5a      	adds	r2, r3, #1
 80a1d98:	3302      	adds	r3, #2
 80a1d9a:	6062      	str	r2, [r4, #4]
 80a1d9c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a1da0:	f000 f905 	bl	80a1fae <__retarget_lock_release_recursive>
 80a1da4:	2000      	movs	r0, #0
 80a1da6:	e7c4      	b.n	80a1d32 <__register_exitproc+0x3e>
 80a1da8:	20000678 	.word	0x20000678
 80a1dac:	200005ec 	.word	0x200005ec
 80a1db0:	00000000 	.word	0x00000000
 80a1db4:	080a056d 	.word	0x080a056d
 80a1db8:	20000074 	.word	0x20000074

080a1dbc <_findenv_r>:
 80a1dbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1dc0:	4607      	mov	r7, r0
 80a1dc2:	4689      	mov	r9, r1
 80a1dc4:	4616      	mov	r6, r2
 80a1dc6:	f000 f8f3 	bl	80a1fb0 <__env_lock>
 80a1dca:	4b18      	ldr	r3, [pc, #96]	; (80a1e2c <_findenv_r+0x70>)
 80a1dcc:	681c      	ldr	r4, [r3, #0]
 80a1dce:	469a      	mov	sl, r3
 80a1dd0:	b134      	cbz	r4, 80a1de0 <_findenv_r+0x24>
 80a1dd2:	464b      	mov	r3, r9
 80a1dd4:	4698      	mov	r8, r3
 80a1dd6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80a1dda:	b139      	cbz	r1, 80a1dec <_findenv_r+0x30>
 80a1ddc:	293d      	cmp	r1, #61	; 0x3d
 80a1dde:	d1f9      	bne.n	80a1dd4 <_findenv_r+0x18>
 80a1de0:	4638      	mov	r0, r7
 80a1de2:	f000 f8eb 	bl	80a1fbc <__env_unlock>
 80a1de6:	2000      	movs	r0, #0
 80a1de8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1dec:	eba8 0809 	sub.w	r8, r8, r9
 80a1df0:	46a3      	mov	fp, r4
 80a1df2:	f854 0b04 	ldr.w	r0, [r4], #4
 80a1df6:	2800      	cmp	r0, #0
 80a1df8:	d0f2      	beq.n	80a1de0 <_findenv_r+0x24>
 80a1dfa:	4642      	mov	r2, r8
 80a1dfc:	4649      	mov	r1, r9
 80a1dfe:	f7ff fca7 	bl	80a1750 <strncmp>
 80a1e02:	2800      	cmp	r0, #0
 80a1e04:	d1f4      	bne.n	80a1df0 <_findenv_r+0x34>
 80a1e06:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a1e0a:	eb03 0508 	add.w	r5, r3, r8
 80a1e0e:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a1e12:	2b3d      	cmp	r3, #61	; 0x3d
 80a1e14:	d1ec      	bne.n	80a1df0 <_findenv_r+0x34>
 80a1e16:	f8da 3000 	ldr.w	r3, [sl]
 80a1e1a:	4638      	mov	r0, r7
 80a1e1c:	ebab 0303 	sub.w	r3, fp, r3
 80a1e20:	109b      	asrs	r3, r3, #2
 80a1e22:	6033      	str	r3, [r6, #0]
 80a1e24:	f000 f8ca 	bl	80a1fbc <__env_unlock>
 80a1e28:	1c68      	adds	r0, r5, #1
 80a1e2a:	e7dd      	b.n	80a1de8 <_findenv_r+0x2c>
 80a1e2c:	200000d0 	.word	0x200000d0

080a1e30 <_getenv_r>:
 80a1e30:	b507      	push	{r0, r1, r2, lr}
 80a1e32:	aa01      	add	r2, sp, #4
 80a1e34:	f7ff ffc2 	bl	80a1dbc <_findenv_r>
 80a1e38:	b003      	add	sp, #12
 80a1e3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1e40 <__gettzinfo>:
 80a1e40:	4800      	ldr	r0, [pc, #0]	; (80a1e44 <__gettzinfo+0x4>)
 80a1e42:	4770      	bx	lr
 80a1e44:	20000078 	.word	0x20000078

080a1e48 <gmtime_r>:
 80a1e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1e4c:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a1e50:	460c      	mov	r4, r1
 80a1e52:	2300      	movs	r3, #0
 80a1e54:	4630      	mov	r0, r6
 80a1e56:	4639      	mov	r1, r7
 80a1e58:	4a4f      	ldr	r2, [pc, #316]	; (80a1f98 <gmtime_r+0x150>)
 80a1e5a:	f000 f8b5 	bl	80a1fc8 <__aeabi_ldivmod>
 80a1e5e:	4639      	mov	r1, r7
 80a1e60:	4605      	mov	r5, r0
 80a1e62:	2300      	movs	r3, #0
 80a1e64:	4630      	mov	r0, r6
 80a1e66:	4a4c      	ldr	r2, [pc, #304]	; (80a1f98 <gmtime_r+0x150>)
 80a1e68:	f000 f8ae 	bl	80a1fc8 <__aeabi_ldivmod>
 80a1e6c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a1e70:	2a00      	cmp	r2, #0
 80a1e72:	bfbc      	itt	lt
 80a1e74:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a1e78:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a1e7c:	fbb2 f3f1 	udiv	r3, r2, r1
 80a1e80:	fb01 2213 	mls	r2, r1, r3, r2
 80a1e84:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80a1e88:	60a3      	str	r3, [r4, #8]
 80a1e8a:	fbb2 f3f1 	udiv	r3, r2, r1
 80a1e8e:	fb01 2213 	mls	r2, r1, r3, r2
 80a1e92:	6022      	str	r2, [r4, #0]
 80a1e94:	f04f 0207 	mov.w	r2, #7
 80a1e98:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80a1e9c:	bfac      	ite	ge
 80a1e9e:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80a1ea2:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80a1ea6:	6063      	str	r3, [r4, #4]
 80a1ea8:	1cc3      	adds	r3, r0, #3
 80a1eaa:	fb93 f2f2 	sdiv	r2, r3, r2
 80a1eae:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1eb2:	1a9b      	subs	r3, r3, r2
 80a1eb4:	bf48      	it	mi
 80a1eb6:	3307      	addmi	r3, #7
 80a1eb8:	2800      	cmp	r0, #0
 80a1eba:	4938      	ldr	r1, [pc, #224]	; (80a1f9c <gmtime_r+0x154>)
 80a1ebc:	61a3      	str	r3, [r4, #24]
 80a1ebe:	bfbd      	ittte	lt
 80a1ec0:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80a1ec4:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80a1ec8:	fb93 f1f1 	sdivlt	r1, r3, r1
 80a1ecc:	fb90 f1f1 	sdivge	r1, r0, r1
 80a1ed0:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a1ed4:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80a1ed8:	4b31      	ldr	r3, [pc, #196]	; (80a1fa0 <gmtime_r+0x158>)
 80a1eda:	f240 176d 	movw	r7, #365	; 0x16d
 80a1ede:	fb03 0001 	mla	r0, r3, r1, r0
 80a1ee2:	fbb0 f2f2 	udiv	r2, r0, r2
 80a1ee6:	fbb0 f3fc 	udiv	r3, r0, ip
 80a1eea:	4402      	add	r2, r0
 80a1eec:	1ad2      	subs	r2, r2, r3
 80a1eee:	4b2d      	ldr	r3, [pc, #180]	; (80a1fa4 <gmtime_r+0x15c>)
 80a1ef0:	2664      	movs	r6, #100	; 0x64
 80a1ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 80a1ef6:	1ad3      	subs	r3, r2, r3
 80a1ef8:	fbb3 f5f7 	udiv	r5, r3, r7
 80a1efc:	fbb3 f3fc 	udiv	r3, r3, ip
 80a1f00:	fbb5 f2f6 	udiv	r2, r5, r6
 80a1f04:	1ad3      	subs	r3, r2, r3
 80a1f06:	4403      	add	r3, r0
 80a1f08:	2099      	movs	r0, #153	; 0x99
 80a1f0a:	fb07 3315 	mls	r3, r7, r5, r3
 80a1f0e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80a1f12:	f10c 0c02 	add.w	ip, ip, #2
 80a1f16:	fbbc f7f0 	udiv	r7, ip, r0
 80a1f1a:	f04f 0805 	mov.w	r8, #5
 80a1f1e:	4378      	muls	r0, r7
 80a1f20:	3002      	adds	r0, #2
 80a1f22:	fbb0 f0f8 	udiv	r0, r0, r8
 80a1f26:	f103 0e01 	add.w	lr, r3, #1
 80a1f2a:	ebae 0000 	sub.w	r0, lr, r0
 80a1f2e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80a1f32:	45f4      	cmp	ip, lr
 80a1f34:	bf94      	ite	ls
 80a1f36:	f04f 0c02 	movls.w	ip, #2
 80a1f3a:	f06f 0c09 	mvnhi.w	ip, #9
 80a1f3e:	4467      	add	r7, ip
 80a1f40:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80a1f44:	fb0c 5101 	mla	r1, ip, r1, r5
 80a1f48:	2f01      	cmp	r7, #1
 80a1f4a:	bf98      	it	ls
 80a1f4c:	3101      	addls	r1, #1
 80a1f4e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a1f52:	d30c      	bcc.n	80a1f6e <gmtime_r+0x126>
 80a1f54:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a1f58:	61e3      	str	r3, [r4, #28]
 80a1f5a:	2300      	movs	r3, #0
 80a1f5c:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80a1f60:	60e0      	str	r0, [r4, #12]
 80a1f62:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80a1f66:	4620      	mov	r0, r4
 80a1f68:	6223      	str	r3, [r4, #32]
 80a1f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1f6e:	f015 0f03 	tst.w	r5, #3
 80a1f72:	d102      	bne.n	80a1f7a <gmtime_r+0x132>
 80a1f74:	fb06 5212 	mls	r2, r6, r2, r5
 80a1f78:	b95a      	cbnz	r2, 80a1f92 <gmtime_r+0x14a>
 80a1f7a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80a1f7e:	fbb5 f2f6 	udiv	r2, r5, r6
 80a1f82:	fb06 5212 	mls	r2, r6, r2, r5
 80a1f86:	fab2 f282 	clz	r2, r2
 80a1f8a:	0952      	lsrs	r2, r2, #5
 80a1f8c:	333b      	adds	r3, #59	; 0x3b
 80a1f8e:	4413      	add	r3, r2
 80a1f90:	e7e2      	b.n	80a1f58 <gmtime_r+0x110>
 80a1f92:	2201      	movs	r2, #1
 80a1f94:	e7fa      	b.n	80a1f8c <gmtime_r+0x144>
 80a1f96:	bf00      	nop
 80a1f98:	00015180 	.word	0x00015180
 80a1f9c:	00023ab1 	.word	0x00023ab1
 80a1fa0:	fffdc54f 	.word	0xfffdc54f
 80a1fa4:	00023ab0 	.word	0x00023ab0

080a1fa8 <__retarget_lock_acquire>:
 80a1fa8:	4770      	bx	lr

080a1faa <__retarget_lock_acquire_recursive>:
 80a1faa:	4770      	bx	lr

080a1fac <__retarget_lock_release>:
 80a1fac:	4770      	bx	lr

080a1fae <__retarget_lock_release_recursive>:
 80a1fae:	4770      	bx	lr

080a1fb0 <__env_lock>:
 80a1fb0:	4801      	ldr	r0, [pc, #4]	; (80a1fb8 <__env_lock+0x8>)
 80a1fb2:	f7ff bffa 	b.w	80a1faa <__retarget_lock_acquire_recursive>
 80a1fb6:	bf00      	nop
 80a1fb8:	20000686 	.word	0x20000686

080a1fbc <__env_unlock>:
 80a1fbc:	4801      	ldr	r0, [pc, #4]	; (80a1fc4 <__env_unlock+0x8>)
 80a1fbe:	f7ff bff6 	b.w	80a1fae <__retarget_lock_release_recursive>
 80a1fc2:	bf00      	nop
 80a1fc4:	20000686 	.word	0x20000686

080a1fc8 <__aeabi_ldivmod>:
 80a1fc8:	b97b      	cbnz	r3, 80a1fea <__aeabi_ldivmod+0x22>
 80a1fca:	b972      	cbnz	r2, 80a1fea <__aeabi_ldivmod+0x22>
 80a1fcc:	2900      	cmp	r1, #0
 80a1fce:	bfbe      	ittt	lt
 80a1fd0:	2000      	movlt	r0, #0
 80a1fd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a1fd6:	e006      	blt.n	80a1fe6 <__aeabi_ldivmod+0x1e>
 80a1fd8:	bf08      	it	eq
 80a1fda:	2800      	cmpeq	r0, #0
 80a1fdc:	bf1c      	itt	ne
 80a1fde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a1fe2:	f04f 30ff 	movne.w	r0, #4294967295
 80a1fe6:	f7ff ba3b 	b.w	80a1460 <__aeabi_idiv0>
 80a1fea:	f1ad 0c08 	sub.w	ip, sp, #8
 80a1fee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a1ff2:	2900      	cmp	r1, #0
 80a1ff4:	db09      	blt.n	80a200a <__aeabi_ldivmod+0x42>
 80a1ff6:	2b00      	cmp	r3, #0
 80a1ff8:	db1a      	blt.n	80a2030 <__aeabi_ldivmod+0x68>
 80a1ffa:	f7ff f8cf 	bl	80a119c <__udivmoddi4>
 80a1ffe:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a2002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a2006:	b004      	add	sp, #16
 80a2008:	4770      	bx	lr
 80a200a:	4240      	negs	r0, r0
 80a200c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2010:	2b00      	cmp	r3, #0
 80a2012:	db1b      	blt.n	80a204c <__aeabi_ldivmod+0x84>
 80a2014:	f7ff f8c2 	bl	80a119c <__udivmoddi4>
 80a2018:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a201c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a2020:	b004      	add	sp, #16
 80a2022:	4240      	negs	r0, r0
 80a2024:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2028:	4252      	negs	r2, r2
 80a202a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a202e:	4770      	bx	lr
 80a2030:	4252      	negs	r2, r2
 80a2032:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2036:	f7ff f8b1 	bl	80a119c <__udivmoddi4>
 80a203a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a203e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a2042:	b004      	add	sp, #16
 80a2044:	4240      	negs	r0, r0
 80a2046:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a204a:	4770      	bx	lr
 80a204c:	4252      	negs	r2, r2
 80a204e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2052:	f7ff f8a3 	bl	80a119c <__udivmoddi4>
 80a2056:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a205a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a205e:	b004      	add	sp, #16
 80a2060:	4252      	negs	r2, r2
 80a2062:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2066:	4770      	bx	lr

080a2068 <dynalib_user>:
 80a2068:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a2078:	0000 0000 227b 2274 253a 2c64 7322 7274     ....{"t":%d,"str
 80a2088:	3a22 2522 2273 007d 7061 0070 5925 252d     ":"%s"}.app.%Y-%
 80a2098:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a20a8:	7361 7463 6d69 0065                         asctime.

080a20b0 <_ZTV9IPAddress>:
	...
 80a20b8:	0ad1 080a 0ac1 080a 0ac3 080a               ............

080a20c4 <_ZTV9USBSerial>:
	...
 80a20cc:	0b8f 080a 0bf5 080a 0bcd 080a 06eb 080a     ................
 80a20dc:	0bbf 080a 0b91 080a 0ba1 080a 0bef 080a     ................
 80a20ec:	0bb1 080a 0b89 080a                         ........

080a20f4 <_ZTV11USARTSerial>:
	...
 80a20fc:	0d1d 080a 0d87 080a 0d63 080a 06eb 080a     ........c.......
 80a210c:	0d33 080a 0d4f 080a 0d41 080a 0d5d 080a     3...O...A...]...
 80a211c:	0d1f 080a 0d25 080a                         ....%...

080a2124 <_ZTV7TwoWire>:
	...
 80a212c:	0e09 080a 0e53 080a 0e2b 080a 0e0b 080a     ....S...+.......
 80a213c:	0e33 080a 0e3b 080a 0e43 080a 0e4b 080a     3...;...C...K...

080a214c <_ZTVN5spark9WiFiClassE>:
	...
 80a2154:	0f1b 080a 0f11 080a 0f07 080a 0e85 080a     ................
 80a2164:	07f1 080a 0efb 080a 0f79 080a 0f81 080a     ........y.......
 80a2174:	0eef 080a 0ee7 080a 0edd 080a 0ed3 080a     ................
 80a2184:	0e8f 080a                                   ....

080a2188 <_ZTVN5spark12NetworkClassE>:
	...
 80a2190:	0f39 080a 0f43 080a 0f4d 080a 0f57 080a     9...C...M...W...
 80a21a0:	0f61 080a 0f6d 080a 0f79 080a 0f81 080a     a...m...y.......
 80a21b0:	0f89 080a 0f95 080a 0f9d 080a 0fa7 080a     ................
 80a21c0:	0fb1 080a                                   ....

080a21c4 <_ZSt7nothrow>:
 80a21c4:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 80a21d4:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

080a21e5 <day_name.4782>:
 80a21e5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a21f5:	6972 6153                                    riSat

080a21fa <mon_name.4783>:
 80a21fa:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a220a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a221a:	4476 6365 0000                              vDec..

080a2220 <__month_lengths>:
 80a2220:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a2230:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a2240:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a2250:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a2260:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a2270:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a2280:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a2290:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a22a0:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a22b0:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a22bc <_ctype_>:
 80a22bc:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a22cc:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a22dc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a22ec:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a22fc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a230c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a231c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a232c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a233c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a23bd <link_const_variable_data_end>:
 80a23bd:	00          	.byte	0x00
	...

080a23c0 <link_constructors_location>:
 80a23c0:	080a0179 	.word	0x080a0179
 80a23c4:	080a060d 	.word	0x080a060d
 80a23c8:	080a07fd 	.word	0x080a07fd
 80a23cc:	080a08f5 	.word	0x080a08f5
 80a23d0:	080a0955 	.word	0x080a0955
 80a23d4:	080a0f25 	.word	0x080a0f25
 80a23d8:	080a1001 	.word	0x080a1001
 80a23dc:	080a10fd 	.word	0x080a10fd
